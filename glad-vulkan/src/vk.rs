
pub use self::types::*;
pub use self::enumerations::*;
pub use self::functions::*;

use std::os::raw;

pub struct FnPtr {
    ptr: *const raw::c_void,
    is_loaded: bool
}

impl FnPtr {
    pub fn empty() -> FnPtr {
        FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false }
    }

    pub fn load<F>(&mut self, loadfn: &mut F, name: &'static str) where F: FnMut(&'static str) -> *const raw::c_void {
        let loaded = loadfn(name);
        if !loaded.is_null() {
            self.ptr = loaded;
            self.is_loaded = true;
        } else {
            self.ptr = FnPtr::not_initialized as *const raw::c_void;
            self.is_loaded = false;
        };
    }

    pub fn aliased(&mut self, other: &FnPtr) {
        if !self.is_loaded && other.is_loaded {
            self.ptr = other.ptr;
            self.is_loaded = other.is_loaded;
        }
    }

    #[inline(never)]
    fn not_initialized() -> ! { panic!("vulkan: function not initialized") }
}

pub mod types {
#![allow(dead_code, non_camel_case_types, non_snake_case)]


use std;

// types required for: xcb
pub type xcb_connection_t = std::os::raw::c_void;
pub type xcb_window_t = u32;
pub type xcb_visualid_t = u32;
// types required for: xlib(_xrandr)
pub type Display = std::os::raw::c_void;
pub type RROutput = std::os::raw::c_ulong;
pub type Window = std::os::raw::c_ulong;
pub type VisualID = std::os::raw::c_ulong;
// types required for: win32
pub type BOOL = std::os::raw::c_int;
pub type DWORD = std::os::raw::c_ulong;
pub type LPVOID = *mut std::os::raw::c_void;
pub type HANDLE = *mut std::os::raw::c_void;
pub type HMONITOR = *mut std::os::raw::c_void;
pub type WCHAR = u16;
pub type LPCWSTR = *const WCHAR;
pub type HINSTANCE = *mut std::os::raw::c_void;
pub type HWND = *mut std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SECURITY_ATTRIBUTES {
    nLength: DWORD,
    lpSecurityDescriptor: LPVOID,
    bInheritHandle: BOOL,
}
// types required for: wayland
pub type wl_display = std::os::raw::c_void;
pub type wl_surface = std::os::raw::c_void;
// types required for: android
pub type AHardwareBuffer = std::os::raw::c_void;
pub type ANativeWindow = std::os::raw::c_void;
// types required for: mir
pub type MirConnection = std::os::raw::c_void;
pub type MirSurface = std::os::raw::c_void;


#[macro_export]
macro_rules! VK_MAKE_VERSION {
    ($major:expr, $minor:expr, $patch:expr) => ((($major) << 22) | (($minor) << 12) | ($patch));
}

#[macro_export]
macro_rules! VK_VERSION_MAJOR { ($version:expr) => ($version >> 22); }
#[macro_export]
macro_rules! VK_VERSION_MINOR { ($version:expr) => (($version >> 12) & 0x3ff); }
#[macro_export]
macro_rules! VK_VERSION_PATCH { ($version:expr) => ($version & 0xfff); }

#[macro_export]
macro_rules! VK_DEFINE_NON_DISPATCHABLE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(u64);
    );
}

#[macro_export]
macro_rules! VK_DEFINE_HANDLE {
    ($name:ident) => (
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct $name(*const std::os::raw::c_void);
    );
}

VK_DEFINE_HANDLE!(VkInstance);
VK_DEFINE_HANDLE!(VkPhysicalDevice);
VK_DEFINE_HANDLE!(VkDevice);
VK_DEFINE_HANDLE!(VkQueue);
VK_DEFINE_HANDLE!(VkCommandBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDeviceMemory);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkCommandPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkBufferView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImage);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkImageView);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkShaderModule);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipeline);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSampler);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSet);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorSetLayout);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFence);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSemaphore);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkEvent);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkQueryPool);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkFramebuffer);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkRenderPass);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkPipelineCache);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkDescriptorUpdateTemplate);
VK_DEFINE_NON_DISPATCHABLE_HANDLE!(VkSamplerYcbcrConversion);

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentLoadOp {
     VK_ATTACHMENT_LOAD_OP_LOAD = 0,
     VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
     VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentStoreOp {
     VK_ATTACHMENT_STORE_OP_STORE = 0,
     VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendFactor {
     VK_BLEND_FACTOR_ZERO = 0,
     VK_BLEND_FACTOR_ONE = 1,
     VK_BLEND_FACTOR_SRC_COLOR = 2,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
     VK_BLEND_FACTOR_DST_COLOR = 4,
     VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
     VK_BLEND_FACTOR_SRC_ALPHA = 6,
     VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
     VK_BLEND_FACTOR_DST_ALPHA = 8,
     VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
     VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
     VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
     VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
     VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
     VK_BLEND_FACTOR_SRC1_COLOR = 15,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
     VK_BLEND_FACTOR_SRC1_ALPHA = 17,
     VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBlendOp {
     VK_BLEND_OP_ADD = 0,
     VK_BLEND_OP_SUBTRACT = 1,
     VK_BLEND_OP_REVERSE_SUBTRACT = 2,
     VK_BLEND_OP_MIN = 3,
     VK_BLEND_OP_MAX = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBorderColor {
     VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
     VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
     VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
     VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
     VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
     VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFramebufferCreateFlagBits {
     VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCacheHeaderVersion {
     VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorSetLayoutCreateFlagBits {
     VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDeviceQueueCreateFlagBits {
     VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferCreateFlagBits {
     VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
     VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_BUFFER_CREATE_PROTECTED_BIT = 8,
     VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkBufferUsageFlagBits {
     VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
     VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
     VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
     VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
     VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
     VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
     VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
     VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
     VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
     VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkColorComponentFlagBits {
     VK_COLOR_COMPONENT_R_BIT = 1,
     VK_COLOR_COMPONENT_G_BIT = 2,
     VK_COLOR_COMPONENT_B_BIT = 4,
     VK_COLOR_COMPONENT_A_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkComponentSwizzle {
     VK_COMPONENT_SWIZZLE_IDENTITY = 0,
     VK_COMPONENT_SWIZZLE_ZERO = 1,
     VK_COMPONENT_SWIZZLE_ONE = 2,
     VK_COMPONENT_SWIZZLE_R = 3,
     VK_COMPONENT_SWIZZLE_G = 4,
     VK_COMPONENT_SWIZZLE_B = 5,
     VK_COMPONENT_SWIZZLE_A = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolCreateFlagBits {
     VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
     VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
     VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandPoolResetFlagBits {
     VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferResetFlagBits {
     VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferLevel {
     VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
     VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCommandBufferUsageFlagBits {
     VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
     VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
     VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCompareOp {
     VK_COMPARE_OP_NEVER = 0,
     VK_COMPARE_OP_LESS = 1,
     VK_COMPARE_OP_EQUAL = 2,
     VK_COMPARE_OP_LESS_OR_EQUAL = 3,
     VK_COMPARE_OP_GREATER = 4,
     VK_COMPARE_OP_NOT_EQUAL = 5,
     VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
     VK_COMPARE_OP_ALWAYS = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkCullModeFlagBits {
     VK_CULL_MODE_NONE = 0,
     VK_CULL_MODE_FRONT_BIT = 1,
     VK_CULL_MODE_BACK_BIT = 2,
     VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorType {
     VK_DESCRIPTOR_TYPE_SAMPLER = 0,
     VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
     VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
     VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
     VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
     VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
     VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
     VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
     VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDynamicState {
     VK_DYNAMIC_STATE_VIEWPORT = 0,
     VK_DYNAMIC_STATE_SCISSOR = 1,
     VK_DYNAMIC_STATE_LINE_WIDTH = 2,
     VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
     VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
     VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
     VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
     VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
     VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceCreateFlagBits {
     VK_FENCE_CREATE_SIGNALED_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPolygonMode {
     VK_POLYGON_MODE_FILL = 0,
     VK_POLYGON_MODE_LINE = 1,
     VK_POLYGON_MODE_POINT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormat {
     VK_FORMAT_UNDEFINED = 0,
     VK_FORMAT_R4G4_UNORM_PACK8 = 1,
     VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
     VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
     VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
     VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
     VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
     VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
     VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
     VK_FORMAT_R8_UNORM = 9,
     VK_FORMAT_R8_SNORM = 10,
     VK_FORMAT_R8_USCALED = 11,
     VK_FORMAT_R8_SSCALED = 12,
     VK_FORMAT_R8_UINT = 13,
     VK_FORMAT_R8_SINT = 14,
     VK_FORMAT_R8_SRGB = 15,
     VK_FORMAT_R8G8_UNORM = 16,
     VK_FORMAT_R8G8_SNORM = 17,
     VK_FORMAT_R8G8_USCALED = 18,
     VK_FORMAT_R8G8_SSCALED = 19,
     VK_FORMAT_R8G8_UINT = 20,
     VK_FORMAT_R8G8_SINT = 21,
     VK_FORMAT_R8G8_SRGB = 22,
     VK_FORMAT_R8G8B8_UNORM = 23,
     VK_FORMAT_R8G8B8_SNORM = 24,
     VK_FORMAT_R8G8B8_USCALED = 25,
     VK_FORMAT_R8G8B8_SSCALED = 26,
     VK_FORMAT_R8G8B8_UINT = 27,
     VK_FORMAT_R8G8B8_SINT = 28,
     VK_FORMAT_R8G8B8_SRGB = 29,
     VK_FORMAT_B8G8R8_UNORM = 30,
     VK_FORMAT_B8G8R8_SNORM = 31,
     VK_FORMAT_B8G8R8_USCALED = 32,
     VK_FORMAT_B8G8R8_SSCALED = 33,
     VK_FORMAT_B8G8R8_UINT = 34,
     VK_FORMAT_B8G8R8_SINT = 35,
     VK_FORMAT_B8G8R8_SRGB = 36,
     VK_FORMAT_R8G8B8A8_UNORM = 37,
     VK_FORMAT_R8G8B8A8_SNORM = 38,
     VK_FORMAT_R8G8B8A8_USCALED = 39,
     VK_FORMAT_R8G8B8A8_SSCALED = 40,
     VK_FORMAT_R8G8B8A8_UINT = 41,
     VK_FORMAT_R8G8B8A8_SINT = 42,
     VK_FORMAT_R8G8B8A8_SRGB = 43,
     VK_FORMAT_B8G8R8A8_UNORM = 44,
     VK_FORMAT_B8G8R8A8_SNORM = 45,
     VK_FORMAT_B8G8R8A8_USCALED = 46,
     VK_FORMAT_B8G8R8A8_SSCALED = 47,
     VK_FORMAT_B8G8R8A8_UINT = 48,
     VK_FORMAT_B8G8R8A8_SINT = 49,
     VK_FORMAT_B8G8R8A8_SRGB = 50,
     VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
     VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
     VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
     VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
     VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
     VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
     VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
     VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
     VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
     VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
     VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
     VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
     VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
     VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
     VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
     VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
     VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
     VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
     VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
     VK_FORMAT_R16_UNORM = 70,
     VK_FORMAT_R16_SNORM = 71,
     VK_FORMAT_R16_USCALED = 72,
     VK_FORMAT_R16_SSCALED = 73,
     VK_FORMAT_R16_UINT = 74,
     VK_FORMAT_R16_SINT = 75,
     VK_FORMAT_R16_SFLOAT = 76,
     VK_FORMAT_R16G16_UNORM = 77,
     VK_FORMAT_R16G16_SNORM = 78,
     VK_FORMAT_R16G16_USCALED = 79,
     VK_FORMAT_R16G16_SSCALED = 80,
     VK_FORMAT_R16G16_UINT = 81,
     VK_FORMAT_R16G16_SINT = 82,
     VK_FORMAT_R16G16_SFLOAT = 83,
     VK_FORMAT_R16G16B16_UNORM = 84,
     VK_FORMAT_R16G16B16_SNORM = 85,
     VK_FORMAT_R16G16B16_USCALED = 86,
     VK_FORMAT_R16G16B16_SSCALED = 87,
     VK_FORMAT_R16G16B16_UINT = 88,
     VK_FORMAT_R16G16B16_SINT = 89,
     VK_FORMAT_R16G16B16_SFLOAT = 90,
     VK_FORMAT_R16G16B16A16_UNORM = 91,
     VK_FORMAT_R16G16B16A16_SNORM = 92,
     VK_FORMAT_R16G16B16A16_USCALED = 93,
     VK_FORMAT_R16G16B16A16_SSCALED = 94,
     VK_FORMAT_R16G16B16A16_UINT = 95,
     VK_FORMAT_R16G16B16A16_SINT = 96,
     VK_FORMAT_R16G16B16A16_SFLOAT = 97,
     VK_FORMAT_R32_UINT = 98,
     VK_FORMAT_R32_SINT = 99,
     VK_FORMAT_R32_SFLOAT = 100,
     VK_FORMAT_R32G32_UINT = 101,
     VK_FORMAT_R32G32_SINT = 102,
     VK_FORMAT_R32G32_SFLOAT = 103,
     VK_FORMAT_R32G32B32_UINT = 104,
     VK_FORMAT_R32G32B32_SINT = 105,
     VK_FORMAT_R32G32B32_SFLOAT = 106,
     VK_FORMAT_R32G32B32A32_UINT = 107,
     VK_FORMAT_R32G32B32A32_SINT = 108,
     VK_FORMAT_R32G32B32A32_SFLOAT = 109,
     VK_FORMAT_R64_UINT = 110,
     VK_FORMAT_R64_SINT = 111,
     VK_FORMAT_R64_SFLOAT = 112,
     VK_FORMAT_R64G64_UINT = 113,
     VK_FORMAT_R64G64_SINT = 114,
     VK_FORMAT_R64G64_SFLOAT = 115,
     VK_FORMAT_R64G64B64_UINT = 116,
     VK_FORMAT_R64G64B64_SINT = 117,
     VK_FORMAT_R64G64B64_SFLOAT = 118,
     VK_FORMAT_R64G64B64A64_UINT = 119,
     VK_FORMAT_R64G64B64A64_SINT = 120,
     VK_FORMAT_R64G64B64A64_SFLOAT = 121,
     VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
     VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
     VK_FORMAT_D16_UNORM = 124,
     VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
     VK_FORMAT_D32_SFLOAT = 126,
     VK_FORMAT_S8_UINT = 127,
     VK_FORMAT_D16_UNORM_S8_UINT = 128,
     VK_FORMAT_D24_UNORM_S8_UINT = 129,
     VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
     VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
     VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
     VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
     VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
     VK_FORMAT_BC2_UNORM_BLOCK = 135,
     VK_FORMAT_BC2_SRGB_BLOCK = 136,
     VK_FORMAT_BC3_UNORM_BLOCK = 137,
     VK_FORMAT_BC3_SRGB_BLOCK = 138,
     VK_FORMAT_BC4_UNORM_BLOCK = 139,
     VK_FORMAT_BC4_SNORM_BLOCK = 140,
     VK_FORMAT_BC5_UNORM_BLOCK = 141,
     VK_FORMAT_BC5_SNORM_BLOCK = 142,
     VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
     VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
     VK_FORMAT_BC7_UNORM_BLOCK = 145,
     VK_FORMAT_BC7_SRGB_BLOCK = 146,
     VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
     VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
     VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
     VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
     VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
     VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
     VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
     VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
     VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
     VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
     VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
     VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
     VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
     VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
     VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
     VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
     VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
     VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
     VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
     VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
     VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
     VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
     VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
     VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
     VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
     VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
     VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
     VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
     VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
     VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
     VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
     VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
     VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
     VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
     VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
     VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
     VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
     VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
     VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
     VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
     VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
     VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
     VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
     VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
     VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
     VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
     VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
     VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
     VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
     VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
     VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
     VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
     VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
     VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
     VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
     VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
     VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
     VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
     VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
     VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
     VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
     VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
     VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
     VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
     VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
     VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFormatFeatureFlagBits {
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
     VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
     VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
     VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
     VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
     VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
     VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
     VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
     VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
     VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
     VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
     VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
     VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
     VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
     VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFrontFace {
     VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
     VK_FRONT_FACE_CLOCKWISE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageAspectFlagBits {
     VK_IMAGE_ASPECT_COLOR_BIT = 1,
     VK_IMAGE_ASPECT_DEPTH_BIT = 2,
     VK_IMAGE_ASPECT_STENCIL_BIT = 4,
     VK_IMAGE_ASPECT_METADATA_BIT = 8,
     VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
     VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
     VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageCreateFlagBits {
     VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
     VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
     VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
     VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
     VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
     VK_IMAGE_CREATE_ALIAS_BIT = 1024,
     VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
     VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
     VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
     VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
     VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
     VK_IMAGE_CREATE_DISJOINT_BIT = 512,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageLayout {
     VK_IMAGE_LAYOUT_UNDEFINED = 0,
     VK_IMAGE_LAYOUT_GENERAL = 1,
     VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
     VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
     VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
     VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
     VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
     VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
     VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
     VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
     VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
     VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
     VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageTiling {
     VK_IMAGE_TILING_OPTIMAL = 0,
     VK_IMAGE_TILING_LINEAR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageType {
     VK_IMAGE_TYPE_1D = 0,
     VK_IMAGE_TYPE_2D = 1,
     VK_IMAGE_TYPE_3D = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageUsageFlagBits {
     VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
     VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
     VK_IMAGE_USAGE_SAMPLED_BIT = 4,
     VK_IMAGE_USAGE_STORAGE_BIT = 8,
     VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
     VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
     VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
     VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkImageViewType {
     VK_IMAGE_VIEW_TYPE_1D = 0,
     VK_IMAGE_VIEW_TYPE_2D = 1,
     VK_IMAGE_VIEW_TYPE_3D = 2,
     VK_IMAGE_VIEW_TYPE_CUBE = 3,
     VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
     VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
     VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSharingMode {
     VK_SHARING_MODE_EXCLUSIVE = 0,
     VK_SHARING_MODE_CONCURRENT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkIndexType {
     VK_INDEX_TYPE_UINT16 = 0,
     VK_INDEX_TYPE_UINT32 = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkLogicOp {
     VK_LOGIC_OP_CLEAR = 0,
     VK_LOGIC_OP_AND = 1,
     VK_LOGIC_OP_AND_REVERSE = 2,
     VK_LOGIC_OP_COPY = 3,
     VK_LOGIC_OP_AND_INVERTED = 4,
     VK_LOGIC_OP_NO_OP = 5,
     VK_LOGIC_OP_XOR = 6,
     VK_LOGIC_OP_OR = 7,
     VK_LOGIC_OP_NOR = 8,
     VK_LOGIC_OP_EQUIVALENT = 9,
     VK_LOGIC_OP_INVERT = 10,
     VK_LOGIC_OP_OR_REVERSE = 11,
     VK_LOGIC_OP_COPY_INVERTED = 12,
     VK_LOGIC_OP_OR_INVERTED = 13,
     VK_LOGIC_OP_NAND = 14,
     VK_LOGIC_OP_SET = 15,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryHeapFlagBits {
     VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAccessFlagBits {
     VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
     VK_ACCESS_INDEX_READ_BIT = 2,
     VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
     VK_ACCESS_UNIFORM_READ_BIT = 8,
     VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
     VK_ACCESS_SHADER_READ_BIT = 32,
     VK_ACCESS_SHADER_WRITE_BIT = 64,
     VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
     VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
     VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
     VK_ACCESS_TRANSFER_READ_BIT = 2048,
     VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
     VK_ACCESS_HOST_READ_BIT = 8192,
     VK_ACCESS_HOST_WRITE_BIT = 16384,
     VK_ACCESS_MEMORY_READ_BIT = 32768,
     VK_ACCESS_MEMORY_WRITE_BIT = 65536,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryPropertyFlagBits {
     VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
     VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
     VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
     VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
     VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPhysicalDeviceType {
     VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
     VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
     VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
     VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
     VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineBindPoint {
     VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
     VK_PIPELINE_BIND_POINT_COMPUTE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineCreateFlagBits {
     VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
     VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
     VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
     VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
     VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPrimitiveTopology {
     VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
     VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
     VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
     VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
     VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryControlFlagBits {
     VK_QUERY_CONTROL_PRECISE_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryPipelineStatisticFlagBits {
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
     VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
     VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
     VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
     VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
     VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
     VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
     VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryResultFlagBits {
     VK_QUERY_RESULT_64_BIT = 1,
     VK_QUERY_RESULT_WAIT_BIT = 2,
     VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
     VK_QUERY_RESULT_PARTIAL_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueryType {
     VK_QUERY_TYPE_OCCLUSION = 0,
     VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
     VK_QUERY_TYPE_TIMESTAMP = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkQueueFlagBits {
     VK_QUEUE_GRAPHICS_BIT = 1,
     VK_QUEUE_COMPUTE_BIT = 2,
     VK_QUEUE_TRANSFER_BIT = 4,
     VK_QUEUE_SPARSE_BINDING_BIT = 8,
     VK_QUEUE_PROTECTED_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubpassContents {
     VK_SUBPASS_CONTENTS_INLINE = 0,
     VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResult {
     VK_SUCCESS = 0,
     VK_NOT_READY = 1,
     VK_TIMEOUT = 2,
     VK_EVENT_SET = 3,
     VK_EVENT_RESET = 4,
     VK_INCOMPLETE = 5,
     VK_ERROR_OUT_OF_HOST_MEMORY = -1,
     VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
     VK_ERROR_INITIALIZATION_FAILED = -3,
     VK_ERROR_DEVICE_LOST = -4,
     VK_ERROR_MEMORY_MAP_FAILED = -5,
     VK_ERROR_LAYER_NOT_PRESENT = -6,
     VK_ERROR_EXTENSION_NOT_PRESENT = -7,
     VK_ERROR_FEATURE_NOT_PRESENT = -8,
     VK_ERROR_INCOMPATIBLE_DRIVER = -9,
     VK_ERROR_TOO_MANY_OBJECTS = -10,
     VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
     VK_ERROR_FRAGMENTED_POOL = -12,
     VK_ERROR_UNKNOWN = -13,
     VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
     VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
     VK_ERROR_FRAGMENTATION = -1000161000,
     VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderStageFlagBits {
     VK_SHADER_STAGE_VERTEX_BIT = 1,
     VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
     VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
     VK_SHADER_STAGE_GEOMETRY_BIT = 8,
     VK_SHADER_STAGE_FRAGMENT_BIT = 16,
     VK_SHADER_STAGE_COMPUTE_BIT = 32,
     VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
     VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseMemoryBindFlagBits {
     VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilFaceFlagBits {
     VK_STENCIL_FACE_FRONT_BIT = 1,
     VK_STENCIL_FACE_BACK_BIT = 2,
     VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStencilOp {
     VK_STENCIL_OP_KEEP = 0,
     VK_STENCIL_OP_ZERO = 1,
     VK_STENCIL_OP_REPLACE = 2,
     VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
     VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
     VK_STENCIL_OP_INVERT = 5,
     VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
     VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkStructureType {
     VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
     VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
     VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
     VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
     VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
     VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
     VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
     VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
     VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
     VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
     VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
     VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
     VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
     VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
     VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
     VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
     VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
     VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
     VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
     VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
     VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
     VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
     VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
     VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
     VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
     VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
     VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
     VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
     VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
     VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
     VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
     VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
     VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
     VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
     VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
     VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
     VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
     VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
     VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
     VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
     VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
     VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
     VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
     VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
     VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
     VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
     VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
     VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
     VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
     VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
     VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
     VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
     VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
     VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
     VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
     VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
     VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
     VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
     VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
     VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
     VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
     VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
     VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
     VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
     VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
     VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
     VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
     VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
     VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
     VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
     VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
     VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
     VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
     VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
     VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
     VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
     VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
     VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
     VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
     VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
     VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
     VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
     VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
     VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
     VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
     VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
     VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
     VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
     VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
     VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSystemAllocationScope {
     VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
     VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
     VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
     VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
     VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkInternalAllocationType {
     VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerAddressMode {
     VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
     VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
     VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
     VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFilter {
     VK_FILTER_NEAREST = 0,
     VK_FILTER_LINEAR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerMipmapMode {
     VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
     VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVertexInputRate {
     VK_VERTEX_INPUT_RATE_VERTEX = 0,
     VK_VERTEX_INPUT_RATE_INSTANCE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPipelineStageFlagBits {
     VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
     VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
     VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
     VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
     VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
     VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
     VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
     VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
     VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
     VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
     VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
     VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
     VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
     VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
     VK_PIPELINE_STAGE_HOST_BIT = 16384,
     VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
     VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSparseImageFormatFlagBits {
     VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
     VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
     VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSampleCountFlagBits {
     VK_SAMPLE_COUNT_1_BIT = 1,
     VK_SAMPLE_COUNT_2_BIT = 2,
     VK_SAMPLE_COUNT_4_BIT = 4,
     VK_SAMPLE_COUNT_8_BIT = 8,
     VK_SAMPLE_COUNT_16_BIT = 16,
     VK_SAMPLE_COUNT_32_BIT = 32,
     VK_SAMPLE_COUNT_64_BIT = 64,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkAttachmentDescriptionFlagBits {
     VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorPoolCreateFlagBits {
     VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
     VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDependencyFlagBits {
     VK_DEPENDENCY_BY_REGION_BIT = 1,
     VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
     VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkObjectType {
     VK_OBJECT_TYPE_UNKNOWN = 0,
     VK_OBJECT_TYPE_INSTANCE = 1,
     VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
     VK_OBJECT_TYPE_DEVICE = 3,
     VK_OBJECT_TYPE_QUEUE = 4,
     VK_OBJECT_TYPE_SEMAPHORE = 5,
     VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
     VK_OBJECT_TYPE_FENCE = 7,
     VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
     VK_OBJECT_TYPE_BUFFER = 9,
     VK_OBJECT_TYPE_IMAGE = 10,
     VK_OBJECT_TYPE_EVENT = 11,
     VK_OBJECT_TYPE_QUERY_POOL = 12,
     VK_OBJECT_TYPE_BUFFER_VIEW = 13,
     VK_OBJECT_TYPE_IMAGE_VIEW = 14,
     VK_OBJECT_TYPE_SHADER_MODULE = 15,
     VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
     VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
     VK_OBJECT_TYPE_RENDER_PASS = 18,
     VK_OBJECT_TYPE_PIPELINE = 19,
     VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
     VK_OBJECT_TYPE_SAMPLER = 21,
     VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
     VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
     VK_OBJECT_TYPE_FRAMEBUFFER = 24,
     VK_OBJECT_TYPE_COMMAND_POOL = 25,
     VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
     VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorUpdateTemplateType {
     VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPointClippingBehavior {
     VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
     VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkResolveModeFlagBits {
     VK_RESOLVE_MODE_NONE = 0,
     VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
     VK_RESOLVE_MODE_AVERAGE_BIT = 2,
     VK_RESOLVE_MODE_MIN_BIT = 4,
     VK_RESOLVE_MODE_MAX_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDescriptorBindingFlagBits {
     VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
     VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
     VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
     VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreType {
     VK_SEMAPHORE_TYPE_BINARY = 0,
     VK_SEMAPHORE_TYPE_TIMELINE = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreWaitFlagBits {
     VK_SEMAPHORE_WAIT_ANY_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryHandleTypeFlagBits {
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
     VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalMemoryFeatureFlagBits {
     VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
     VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
     VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreHandleTypeFlagBits {
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
     VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalSemaphoreFeatureFlagBits {
     VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSemaphoreImportFlagBits {
     VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceHandleTypeFlagBits {
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
     VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkExternalFenceFeatureFlagBits {
     VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
     VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkFenceImportFlagBits {
     VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkPeerMemoryFeatureFlagBits {
     VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
     VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
     VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
     VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkMemoryAllocateFlagBits {
     VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
     VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
     VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSubgroupFeatureFlagBits {
     VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
     VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
     VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
     VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
     VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
     VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
     VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
     VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkTessellationDomainOrigin {
     VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
     VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrModelConversion {
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
     VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerYcbcrRange {
     VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
     VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkChromaLocation {
     VK_CHROMA_LOCATION_COSITED_EVEN = 0,
     VK_CHROMA_LOCATION_MIDPOINT = 1,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkSamplerReductionMode {
     VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
     VK_SAMPLER_REDUCTION_MODE_MIN = 1,
     VK_SAMPLER_REDUCTION_MODE_MAX = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkShaderFloatControlsIndependence {
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
     VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkVendorId {
     VK_VENDOR_ID_VIV = 0x10001,
     VK_VENDOR_ID_VSI = 0x10002,
     VK_VENDOR_ID_KAZAN = 0x10003,
     VK_VENDOR_ID_CODEPLAY = 0x10004,
}

#[repr(i32)]
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum VkDriverId {
     VK_DRIVER_ID_AMD_PROPRIETARY = 1,
     VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
     VK_DRIVER_ID_MESA_RADV = 3,
     VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
     VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
     VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
     VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
     VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
     VK_DRIVER_ID_ARM_PROPRIETARY = 9,
     VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
     VK_DRIVER_ID_GGP_PROPRIETARY = 11,
     VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
}
pub type PFN_vkInternalAllocationNotification = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkInternalFreeNotification = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
) -> ();
pub type PFN_vkReallocationFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    pOriginal: *mut std::os::raw::c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut std::os::raw::c_void;
pub type PFN_vkAllocationFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    size: usize,
    alignment: usize,
    allocationScope: VkSystemAllocationScope,
) -> *mut std::os::raw::c_void;
pub type PFN_vkFreeFunction = extern "system" fn(
    pUserData: *mut std::os::raw::c_void,
    pMemory: *mut std::os::raw::c_void,
) -> ();
pub type PFN_vkVoidFunction = extern "system" fn(
) -> ();

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseOutStructure {
    sType: VkStructureType,
    pNext: *mut VkBaseOutStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseInStructure {
    sType: VkStructureType,
    pNext: *const VkBaseInStructure,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset2D {
    x: i32,
    y: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOffset3D {
    x: i32,
    y: i32,
    z: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent2D {
    width: u32,
    height: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtent3D {
    width: u32,
    height: u32,
    depth: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewport {
    x: std::os::raw::c_float,
    y: std::os::raw::c_float,
    width: std::os::raw::c_float,
    height: std::os::raw::c_float,
    minDepth: std::os::raw::c_float,
    maxDepth: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRect2D {
    offset: VkOffset2D,
    extent: VkExtent2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearRect {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComponentMapping {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtensionProperties {
    extensionName: std::os::raw::c_char,
    specVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerProperties {
    layerName: std::os::raw::c_char,
    specVersion: u32,
    implementationVersion: u32,
    description: std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkApplicationInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    pApplicationName: *const std::os::raw::c_char,
    applicationVersion: u32,
    pEngineName: *const std::os::raw::c_char,
    engineVersion: u32,
    apiVersion: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pUserData: *mut std::os::raw::c_void,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorImageInfo {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyDescriptorSet {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolSize {
    type_: VkDescriptorType,
    descriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationMapEntry {
    constantID: u32,
    offset: u32,
    size: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationInfo {
    mapEntryCount: u32,
    pMapEntries: *const VkSpecializationMapEntry,
    dataSize: usize,
    pData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStencilOpState {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    float32: [std::os::raw::c_float;4],
    int32: [i32;4],
    uint32: [u32;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearDepthStencilValue {
    depth: std::os::raw::c_float,
    stencil: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference {
    attachment: u32,
    layout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndirectCommand {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    x: u32,
    y: u32,
    z: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConformanceVersion {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    driverID: VkDriverId,
    driverName: std::os::raw::c_char,
    driverInfo: std::os::raw::c_char,
    conformanceVersion: VkConformanceVersion,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleType: VkExternalFenceHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    subpassCount: u32,
    pViewMasks: *const u32,
    dependencyCount: u32,
    pViewOffsets: *const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceIndexCount: u32,
    pDeviceIndices: *const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    deviceMask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: *const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: *const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    physicalDeviceCount: u32,
    pPhysicalDevices: *const VkPhysicalDevice,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: usize,
    stride: usize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    pointClippingBehavior: VkPointClippingBehavior,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
    buffer: VkBuffer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    domainOrigin: VkTessellationDomainOrigin,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    conversion: VkSamplerYcbcrConversion,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    planeAspect: VkImageAspectFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    planeAspect: VkImageAspectFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    combinedImageSamplerDescriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    reductionMode: VkSamplerReductionMode,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatListCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    descriptorSetCount: u32,
    pDescriptorCounts: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxVariableDescriptorCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    contents: VkSubpassContents,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassEndInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxTimelineSemaphoreValueDifference: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphoreType: VkSemaphoreType,
    initialValue: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTimelineSemaphoreSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreValueCount: u32,
    pWaitSemaphoreValues: *const u64,
    signalSemaphoreValueCount: u32,
    pSignalSemaphoreValues: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreSignalInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    semaphore: VkSemaphore,
    value: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    opaqueCaptureAddress: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReferenceStencilLayout {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    stencilLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescriptionStencilLayout {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    stencilInitialLayout: VkImageLayout,
    stencilFinalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    opaqueCaptureAddress: u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
}
pub type VkSampleMask = u32;
pub type VkBool32 = u32;
pub type VkFlags = u32;
pub type VkDeviceSize = u64;
pub type VkDeviceAddress = u64;
pub type VkFramebufferCreateFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub type VkRenderPassCreateFlags = VkFlags;
pub type VkSamplerCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub type VkInstanceCreateFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub type VkQueueFlags = VkFlags;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkAccessFlags = VkFlags;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkImageUsageFlags = VkFlags;
pub type VkImageCreateFlags = VkFlags;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkPipelineCreateFlags = VkFlags;
pub type VkColorComponentFlags = VkFlags;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkFormatFeatureFlags = VkFlags;
pub type VkQueryControlFlags = VkFlags;
pub type VkQueryResultFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub type VkEventCreateFlags = VkFlags;
pub type VkCommandPoolCreateFlags = VkFlags;
pub type VkCommandPoolResetFlags = VkFlags;
pub type VkCommandBufferResetFlags = VkFlags;
pub type VkCommandBufferUsageFlags = VkFlags;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
pub type VkImageAspectFlags = VkFlags;
pub type VkSparseMemoryBindFlags = VkFlags;
pub type VkSparseImageFormatFlags = VkFlags;
pub type VkSubpassDescriptionFlags = VkFlags;
pub type VkPipelineStageFlags = VkFlags;
pub type VkSampleCountFlags = VkFlags;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub type VkStencilFaceFlags = VkFlags;
pub type VkCullModeFlags = VkFlags;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub type VkDependencyFlags = VkFlags;
pub type VkSubgroupFeatureFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub type VkSemaphoreWaitFlags = VkFlags;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
pub type VkSemaphoreImportFlags = VkFlags;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub type VkFenceImportFlags = VkFlags;
pub type VkDescriptorBindingFlags = VkFlags;
pub type VkResolveModeFlags = VkFlags;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueCount: u32,
    pub pQueuePriorities: *const std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstanceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: *const VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: *const *const std::os::raw::c_char,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: *const *const std::os::raw::c_char,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryType {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHeap {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMappedMemoryRange {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSet {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: *const VkDescriptorImageInfo,
    pBufferInfo: *const VkDescriptorBufferInfo,
    pTexelBufferView: *const VkBufferView,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresource {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceLayers {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresourceRange {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: *const u32,
    initialLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubresourceLayout {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCopy {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseMemoryBind {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    image: VkImage,
    bindCount: u32,
    pBinds: *const VkSparseImageMemoryBind,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindSparseInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    bufferBindCount: u32,
    pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: *const VkSparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCopy {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageBlit {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [VkOffset3D;2],
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [VkOffset3D;2],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferImageCopy {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageResolve {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkShaderModuleCreateFlags,
    codeSize: usize,
    pCode: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: *const VkSampler,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: *const VkDescriptorSetLayoutBinding,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: *const VkDescriptorPoolSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: *const std::os::raw::c_char,
    pSpecializationInfo: *const VkSpecializationInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: *const VkViewport,
    scissorCount: u32,
    pScissors: *const VkRect2D,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: std::os::raw::c_float,
    depthBiasClamp: std::os::raw::c_float,
    depthBiasSlopeFactor: std::os::raw::c_float,
    lineWidth: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: std::os::raw::c_float,
    pSampleMask: *const VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: *const VkPipelineColorBlendAttachmentState,
    blendConstants: [std::os::raw::c_float;4],
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: *const VkDynamicState,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: std::os::raw::c_float,
    maxDepthBounds: std::os::raw::c_float,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: *const VkPipelineShaderStageCreateInfo,
    pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pViewportState: *const VkPipelineViewportStateCreateInfo,
    pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: *const std::os::raw::c_void,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushConstantRange {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: *const VkDescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: *const VkPushConstantRange,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: std::os::raw::c_float,
    anisotropyEnable: VkBool32,
    maxAnisotropy: std::os::raw::c_float,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: std::os::raw::c_float,
    maxLod: std::os::raw::c_float,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: *const VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference,
    pResolveAttachments: *const VkAttachmentReference,
    pDepthStencilAttachment: *const VkAttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEventCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkEventCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkFenceCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [u32;3],
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [u32;3],
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: std::os::raw::c_float,
    maxSamplerAnisotropy: std::os::raw::c_float,
    maxViewports: u32,
    maxViewportDimensions: [u32;2],
    viewportBoundsRange: [std::os::raw::c_float;2],
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: std::os::raw::c_float,
    maxInterpolationOffset: std::os::raw::c_float,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: std::os::raw::c_float,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [std::os::raw::c_float;2],
    lineWidthRange: [std::os::raw::c_float;2],
    pointSizeGranularity: std::os::raw::c_float,
    lineWidthGranularity: std::os::raw::c_float,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSemaphoreCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: *const VkImageView,
    width: u32,
    height: u32,
    layers: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    waitSemaphoreCount: u32,
    pWaitSemaphores: *const VkSemaphore,
    pWaitDstStageMask: *const VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: *const VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: *const VkSemaphore,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    features: VkPhysicalDeviceFeatures,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    formatProperties: VkFormatProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imageFormatProperties: VkImageFormatProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    type_: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    queueFamilyProperties: VkQueueFamilyProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    properties: VkSparseImageFormatProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    type_: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
}
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryProperties {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalBufferProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    externalMemoryProperties: VkExternalMemoryProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    deviceUUID: u8,
    driverUUID: u8,
    deviceLUID: u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalMemoryHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFenceProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    handleTypes: VkExternalFenceHandleTypeFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    physicalDeviceCount: u32,
    physicalDevices: VkPhysicalDevice,
    subsetAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    aspectReferenceCount: u32,
    pAspectReferences: *const VkInputAttachmentAspectReference,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderSubgroupExtendedTypes: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryRequirements: VkMemoryRequirements,
}
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryRequirements: VkSparseImageMemoryRequirements,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    usage: VkImageUsageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    samplerYcbcrConversion: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    protectedSubmit: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    protectedMemory: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    protectedNoFault: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    supported: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderDrawParameters: VkBool32,
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    hostQueryReset: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    bindingCount: u32,
    pBindingFlags: *const VkDescriptorBindingFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: *const VkAttachmentReference2,
    colorAttachmentCount: u32,
    pColorAttachments: *const VkAttachmentReference2,
    pResolveAttachments: *const VkAttachmentReference2,
    pDepthStencilAttachment: *const VkAttachmentReference2,
    preserveAttachmentCount: u32,
    pPreserveAttachments: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo2 {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: *const VkAttachmentDescription2,
    subpassCount: u32,
    pSubpasses: *const VkSubpassDescription2,
    dependencyCount: u32,
    pDependencies: *const VkSubpassDependency2,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: *const u32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    timelineSemaphore: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreWaitInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkSemaphoreWaitFlags,
    semaphoreCount: u32,
    pSemaphores: *const VkSemaphore,
    pValues: *const u64,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    depthResolveMode: VkResolveModeFlagBits,
    stencilResolveMode: VkResolveModeFlagBits,
    pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageStencilUsageCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    stencilUsage: VkImageUsageFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    scalarBlockLayout: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    uniformBufferStandardLayout: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    imagelessFramebuffer: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: *const VkFormat,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    separateDepthStencilLayouts: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Features {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
    protectedMemory: VkBool32,
    samplerYcbcrConversion: VkBool32,
    shaderDrawParameters: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Properties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    deviceUUID: u8,
    driverUUID: u8,
    deviceLUID: u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
    subgroupSize: u32,
    subgroupSupportedStages: VkShaderStageFlags,
    subgroupSupportedOperations: VkSubgroupFeatureFlags,
    subgroupQuadOperationsInAllStages: VkBool32,
    pointClippingBehavior: VkPointClippingBehavior,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
    protectedNoFault: VkBool32,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    samplerMirrorClampToEdge: VkBool32,
    drawIndirectCount: VkBool32,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
    descriptorIndexing: VkBool32,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
    samplerFilterMinmax: VkBool32,
    scalarBlockLayout: VkBool32,
    imagelessFramebuffer: VkBool32,
    uniformBufferStandardLayout: VkBool32,
    shaderSubgroupExtendedTypes: VkBool32,
    separateDepthStencilLayouts: VkBool32,
    hostQueryReset: VkBool32,
    timelineSemaphore: VkBool32,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    shaderOutputViewportIndex: VkBool32,
    shaderOutputLayer: VkBool32,
    subgroupBroadcastDynamicId: VkBool32,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Properties {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    driverID: VkDriverId,
    driverName: std::os::raw::c_char,
    driverInfo: std::os::raw::c_char,
    conformanceVersion: VkConformanceVersion,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
    maxTimelineSemaphoreValueDifference: u64,
    framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    deviceName: std::os::raw::c_char,
    pipelineCacheUUID: u8,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const std::os::raw::c_void,
    pub flags: VkDeviceCreateFlags,
    pub queueCreateInfoCount: u32,
    pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const std::os::raw::c_char,
    pub pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    memoryTypeCount: u32,
    memoryTypes: VkMemoryType,
    memoryHeapCount: u32,
    memoryHeaps: VkMemoryHeap,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    properties: VkPhysicalDeviceProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    sType: VkStructureType,
    pNext: *mut std::os::raw::c_void,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
}

#[allow(non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfo {
    sType: VkStructureType,
    pNext: *const std::os::raw::c_void,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
}

pub mod enumerations {
    #![allow(dead_code, non_upper_case_globals, unused_imports)]

    use std;
    use super::types::*;

    pub const VK_ATTACHMENT_UNUSED: std::os::raw::c_uint = !0;
    pub const VK_FALSE: std::os::raw::c_uint = 0;
    pub const VK_LOD_CLAMP_NONE: std::os::raw::c_float = 1000.0;
    pub const VK_LUID_SIZE: std::os::raw::c_uint = 8;
    pub const VK_MAX_DESCRIPTION_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_DEVICE_GROUP_SIZE: std::os::raw::c_uint = 32;
    pub const VK_MAX_DRIVER_INFO_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_DRIVER_NAME_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_EXTENSION_NAME_SIZE: std::os::raw::c_uint = 256;
    pub const VK_MAX_MEMORY_HEAPS: std::os::raw::c_uint = 16;
    pub const VK_MAX_MEMORY_TYPES: std::os::raw::c_uint = 32;
    pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: std::os::raw::c_uint = 256;
    pub const VK_QUEUE_FAMILY_EXTERNAL: std::os::raw::c_uint = !0-1;
    pub const VK_QUEUE_FAMILY_IGNORED: std::os::raw::c_uint = !0;
    pub const VK_REMAINING_ARRAY_LAYERS: std::os::raw::c_uint = !0;
    pub const VK_REMAINING_MIP_LEVELS: std::os::raw::c_uint = !0;
    pub const VK_SUBPASS_EXTERNAL: std::os::raw::c_uint = !0;
    pub const VK_TRUE: std::os::raw::c_uint = 1;
    pub const VK_UUID_SIZE: std::os::raw::c_uint = 16;
    pub const VK_WHOLE_SIZE: std::os::raw::c_uint = !0;
}

pub mod functions {
    #![allow(non_snake_case, unused_variables, dead_code)]

    use std;
    use std::mem;
    use super::storage;
    use super::types::*;

     #[inline] pub unsafe fn AllocateCommandBuffers(device: VkDevice, pAllocateInfo: *const VkCommandBufferAllocateInfo, pCommandBuffers: *mut VkCommandBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkCommandBufferAllocateInfo, *mut VkCommandBuffer) -> VkResult>(storage::AllocateCommandBuffers.ptr)(device, pAllocateInfo, pCommandBuffers) }
     #[inline] pub unsafe fn AllocateDescriptorSets(device: VkDevice, pAllocateInfo: *const VkDescriptorSetAllocateInfo, pDescriptorSets: *mut VkDescriptorSet) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetAllocateInfo, *mut VkDescriptorSet) -> VkResult>(storage::AllocateDescriptorSets.ptr)(device, pAllocateInfo, pDescriptorSets) }
     #[inline] pub unsafe fn AllocateMemory(device: VkDevice, pAllocateInfo: *const VkMemoryAllocateInfo, pAllocator: *const VkAllocationCallbacks, pMemory: *mut VkDeviceMemory) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkMemoryAllocateInfo, *const VkAllocationCallbacks, *mut VkDeviceMemory) -> VkResult>(storage::AllocateMemory.ptr)(device, pAllocateInfo, pAllocator, pMemory) }
     #[inline] pub unsafe fn BeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: *const VkCommandBufferBeginInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkCommandBufferBeginInfo) -> VkResult>(storage::BeginCommandBuffer.ptr)(commandBuffer, pBeginInfo) }
     #[inline] pub unsafe fn BindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) -> VkResult>(storage::BindBufferMemory.ptr)(device, buffer, memory, memoryOffset) }
     #[inline] pub unsafe fn BindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindBufferMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindBufferMemoryInfo) -> VkResult>(storage::BindBufferMemory2.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn BindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) -> VkResult>(storage::BindImageMemory.ptr)(device, image, memory, memoryOffset) }
     #[inline] pub unsafe fn BindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: *const VkBindImageMemoryInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkBindImageMemoryInfo) -> VkResult>(storage::BindImageMemory2.ptr)(device, bindInfoCount, pBindInfos) }
     #[inline] pub unsafe fn CmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) -> ()>(storage::CmdBeginQuery.ptr)(commandBuffer, queryPool, query, flags) }
     #[inline] pub unsafe fn CmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, contents: VkSubpassContents) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkRenderPassBeginInfo, VkSubpassContents) -> ()>(storage::CmdBeginRenderPass.ptr)(commandBuffer, pRenderPassBegin, contents) }
     #[inline] pub unsafe fn CmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: *const VkRenderPassBeginInfo, pSubpassBeginInfo: *const VkSubpassBeginInfo) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkRenderPassBeginInfo, *const VkSubpassBeginInfo) -> ()>(storage::CmdBeginRenderPass2.ptr)(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) }
     #[inline] pub unsafe fn CmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: *const u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, *const VkDescriptorSet, u32, *const u32) -> ()>(storage::CmdBindDescriptorSets.ptr)(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) }
     #[inline] pub unsafe fn CmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) -> ()>(storage::CmdBindIndexBuffer.ptr)(commandBuffer, buffer, offset, indexType) }
     #[inline] pub unsafe fn CmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineBindPoint, VkPipeline) -> ()>(storage::CmdBindPipeline.ptr)(commandBuffer, pipelineBindPoint, pipeline) }
     #[inline] pub unsafe fn CmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: *const VkBuffer, pOffsets: *const VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkBuffer, *const VkDeviceSize) -> ()>(storage::CmdBindVertexBuffers.ptr)(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) }
     #[inline] pub unsafe fn CmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageBlit, filter: VkFilter) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageBlit, VkFilter) -> ()>(storage::CmdBlitImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) }
     #[inline] pub unsafe fn CmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: *const VkClearAttachment, rectCount: u32, pRects: *const VkClearRect) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkClearAttachment, u32, *const VkClearRect) -> ()>(storage::CmdClearAttachments.ptr)(commandBuffer, attachmentCount, pAttachments, rectCount, pRects) }
     #[inline] pub unsafe fn CmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: *const VkClearColorValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, *const VkClearColorValue, u32, *const VkImageSubresourceRange) -> ()>(storage::CmdClearColorImage.ptr)(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges) }
     #[inline] pub unsafe fn CmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: *const VkClearDepthStencilValue, rangeCount: u32, pRanges: *const VkImageSubresourceRange) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, *const VkClearDepthStencilValue, u32, *const VkImageSubresourceRange) -> ()>(storage::CmdClearDepthStencilImage.ptr)(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges) }
     #[inline] pub unsafe fn CmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkBuffer, u32, *const VkBufferCopy) -> ()>(storage::CmdCopyBuffer.ptr)(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkBufferImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, *const VkBufferImageCopy) -> ()>(storage::CmdCopyBufferToImage.ptr)(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageCopy) -> ()>(storage::CmdCopyImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: *const VkBufferImageCopy) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, *const VkBufferImageCopy) -> ()>(storage::CmdCopyImageToBuffer.ptr)(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) -> ()>(storage::CmdCopyQueryPoolResults.ptr)(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) }
     #[inline] pub unsafe fn CmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32) -> ()>(storage::CmdDispatch.ptr)(commandBuffer, groupCountX, groupCountY, groupCountZ) }
     #[inline] pub unsafe fn CmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, u32, u32, u32) -> ()>(storage::CmdDispatchBase.ptr)(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) }
     #[inline] pub unsafe fn CmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize) -> ()>(storage::CmdDispatchIndirect.ptr)(commandBuffer, buffer, offset) }
     #[inline] pub unsafe fn CmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, u32) -> ()>(storage::CmdDraw.ptr)(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) }
     #[inline] pub unsafe fn CmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, u32, i32, u32) -> ()>(storage::CmdDrawIndexed.ptr)(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) }
     #[inline] pub unsafe fn CmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndexedIndirect.ptr)(commandBuffer, buffer, offset, drawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndexedIndirectCount.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirect.ptr)(commandBuffer, buffer, offset, drawCount, stride) }
     #[inline] pub unsafe fn CmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) -> ()>(storage::CmdDrawIndirectCount.ptr)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) }
     #[inline] pub unsafe fn CmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32) -> ()>(storage::CmdEndQuery.ptr)(commandBuffer, queryPool, query) }
     #[inline] pub unsafe fn CmdEndRenderPass(commandBuffer: VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> ()>(storage::CmdEndRenderPass.ptr)(commandBuffer) }
     #[inline] pub unsafe fn CmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkSubpassEndInfo) -> ()>(storage::CmdEndRenderPass2.ptr)(commandBuffer, pSubpassEndInfo) }
     #[inline] pub unsafe fn CmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkCommandBuffer) -> ()>(storage::CmdExecuteCommands.ptr)(commandBuffer, commandBufferCount, pCommandBuffers) }
     #[inline] pub unsafe fn CmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) -> ()>(storage::CmdFillBuffer.ptr)(commandBuffer, dstBuffer, dstOffset, size, data) }
     #[inline] pub unsafe fn CmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkSubpassContents) -> ()>(storage::CmdNextSubpass.ptr)(commandBuffer, contents) }
     #[inline] pub unsafe fn CmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: *const VkSubpassBeginInfo, pSubpassEndInfo: *const VkSubpassEndInfo) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, *const VkSubpassBeginInfo, *const VkSubpassEndInfo) -> ()>(storage::CmdNextSubpass2.ptr)(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) }
     #[inline] pub unsafe fn CmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, *const VkMemoryBarrier, u32, *const VkBufferMemoryBarrier, u32, *const VkImageMemoryBarrier) -> ()>(storage::CmdPipelineBarrier.ptr)(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) }
     #[inline] pub unsafe fn CmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, *const std::os::raw::c_void) -> ()>(storage::CmdPushConstants.ptr)(commandBuffer, layout, stageFlags, offset, size, pValues) }
     #[inline] pub unsafe fn CmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkEvent, VkPipelineStageFlags) -> ()>(storage::CmdResetEvent.ptr)(commandBuffer, event, stageMask) }
     #[inline] pub unsafe fn CmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkQueryPool, u32, u32) -> ()>(storage::CmdResetQueryPool.ptr)(commandBuffer, queryPool, firstQuery, queryCount) }
     #[inline] pub unsafe fn CmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: *const VkImageResolve) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, *const VkImageResolve) -> ()>(storage::CmdResolveImage.ptr)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) }
     #[inline] pub unsafe fn CmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [std::os::raw::c_float;4]) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, [std::os::raw::c_float;4]) -> ()>(storage::CmdSetBlendConstants.ptr)(commandBuffer, blendConstants) }
     #[inline] pub unsafe fn CmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: std::os::raw::c_float, depthBiasClamp: std::os::raw::c_float, depthBiasSlopeFactor: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float, std::os::raw::c_float, std::os::raw::c_float) -> ()>(storage::CmdSetDepthBias.ptr)(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) }
     #[inline] pub unsafe fn CmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: std::os::raw::c_float, maxDepthBounds: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float, std::os::raw::c_float) -> ()>(storage::CmdSetDepthBounds.ptr)(commandBuffer, minDepthBounds, maxDepthBounds) }
     #[inline] pub unsafe fn CmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32) -> ()>(storage::CmdSetDeviceMask.ptr)(commandBuffer, deviceMask) }
     #[inline] pub unsafe fn CmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkEvent, VkPipelineStageFlags) -> ()>(storage::CmdSetEvent.ptr)(commandBuffer, event, stageMask) }
     #[inline] pub unsafe fn CmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: std::os::raw::c_float) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, std::os::raw::c_float) -> ()>(storage::CmdSetLineWidth.ptr)(commandBuffer, lineWidth) }
     #[inline] pub unsafe fn CmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: *const VkRect2D) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkRect2D) -> ()>(storage::CmdSetScissor.ptr)(commandBuffer, firstScissor, scissorCount, pScissors) }
     #[inline] pub unsafe fn CmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilCompareMask.ptr)(commandBuffer, faceMask, compareMask) }
     #[inline] pub unsafe fn CmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilReference.ptr)(commandBuffer, faceMask, reference) }
     #[inline] pub unsafe fn CmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkStencilFaceFlags, u32) -> ()>(storage::CmdSetStencilWriteMask.ptr)(commandBuffer, faceMask, writeMask) }
     #[inline] pub unsafe fn CmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: *const VkViewport) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, u32, *const VkViewport) -> ()>(storage::CmdSetViewport.ptr)(commandBuffer, firstViewport, viewportCount, pViewports) }
     #[inline] pub unsafe fn CmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, *const std::os::raw::c_void) -> ()>(storage::CmdUpdateBuffer.ptr)(commandBuffer, dstBuffer, dstOffset, dataSize, pData) }
     #[inline] pub unsafe fn CmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: *const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: *const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: *const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: *const VkImageMemoryBarrier) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, u32, *const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, *const VkMemoryBarrier, u32, *const VkBufferMemoryBarrier, u32, *const VkImageMemoryBarrier) -> ()>(storage::CmdWaitEvents.ptr)(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) }
     #[inline] pub unsafe fn CmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) -> () { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) -> ()>(storage::CmdWriteTimestamp.ptr)(commandBuffer, pipelineStage, queryPool, query) }
     #[inline] pub unsafe fn CreateBuffer(device: VkDevice, pCreateInfo: *const VkBufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pBuffer: *mut VkBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferCreateInfo, *const VkAllocationCallbacks, *mut VkBuffer) -> VkResult>(storage::CreateBuffer.ptr)(device, pCreateInfo, pAllocator, pBuffer) }
     #[inline] pub unsafe fn CreateBufferView(device: VkDevice, pCreateInfo: *const VkBufferViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkBufferView) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferViewCreateInfo, *const VkAllocationCallbacks, *mut VkBufferView) -> VkResult>(storage::CreateBufferView.ptr)(device, pCreateInfo, pAllocator, pView) }
     #[inline] pub unsafe fn CreateCommandPool(device: VkDevice, pCreateInfo: *const VkCommandPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pCommandPool: *mut VkCommandPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkCommandPoolCreateInfo, *const VkAllocationCallbacks, *mut VkCommandPool) -> VkResult>(storage::CreateCommandPool.ptr)(device, pCreateInfo, pAllocator, pCommandPool) }
     #[inline] pub unsafe fn CreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkComputePipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkComputePipelineCreateInfo, *const VkAllocationCallbacks, *mut VkPipeline) -> VkResult>(storage::CreateComputePipelines.ptr)(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) }
     #[inline] pub unsafe fn CreateDescriptorPool(device: VkDevice, pCreateInfo: *const VkDescriptorPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorPool: *mut VkDescriptorPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorPoolCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorPool) -> VkResult>(storage::CreateDescriptorPool.ptr)(device, pCreateInfo, pAllocator, pDescriptorPool) }
     #[inline] pub unsafe fn CreateDescriptorSetLayout(device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pSetLayout: *mut VkDescriptorSetLayout) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetLayoutCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorSetLayout) -> VkResult>(storage::CreateDescriptorSetLayout.ptr)(device, pCreateInfo, pAllocator, pSetLayout) }
     #[inline] pub unsafe fn CreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo, pAllocator: *const VkAllocationCallbacks, pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorUpdateTemplateCreateInfo, *const VkAllocationCallbacks, *mut VkDescriptorUpdateTemplate) -> VkResult>(storage::CreateDescriptorUpdateTemplate.ptr)(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) }
     #[inline] pub unsafe fn CreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: *const VkDeviceCreateInfo, pAllocator: *const VkAllocationCallbacks, pDevice: *mut VkDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkDeviceCreateInfo, *const VkAllocationCallbacks, *mut VkDevice) -> VkResult>(storage::CreateDevice.ptr)(physicalDevice, pCreateInfo, pAllocator, pDevice) }
     #[inline] pub unsafe fn CreateEvent(device: VkDevice, pCreateInfo: *const VkEventCreateInfo, pAllocator: *const VkAllocationCallbacks, pEvent: *mut VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkEventCreateInfo, *const VkAllocationCallbacks, *mut VkEvent) -> VkResult>(storage::CreateEvent.ptr)(device, pCreateInfo, pAllocator, pEvent) }
     #[inline] pub unsafe fn CreateFence(device: VkDevice, pCreateInfo: *const VkFenceCreateInfo, pAllocator: *const VkAllocationCallbacks, pFence: *mut VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFenceCreateInfo, *const VkAllocationCallbacks, *mut VkFence) -> VkResult>(storage::CreateFence.ptr)(device, pCreateInfo, pAllocator, pFence) }
     #[inline] pub unsafe fn CreateFramebuffer(device: VkDevice, pCreateInfo: *const VkFramebufferCreateInfo, pAllocator: *const VkAllocationCallbacks, pFramebuffer: *mut VkFramebuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkFramebufferCreateInfo, *const VkAllocationCallbacks, *mut VkFramebuffer) -> VkResult>(storage::CreateFramebuffer.ptr)(device, pCreateInfo, pAllocator, pFramebuffer) }
     #[inline] pub unsafe fn CreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: *const VkGraphicsPipelineCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelines: *mut VkPipeline) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkGraphicsPipelineCreateInfo, *const VkAllocationCallbacks, *mut VkPipeline) -> VkResult>(storage::CreateGraphicsPipelines.ptr)(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) }
     #[inline] pub unsafe fn CreateImage(device: VkDevice, pCreateInfo: *const VkImageCreateInfo, pAllocator: *const VkAllocationCallbacks, pImage: *mut VkImage) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageCreateInfo, *const VkAllocationCallbacks, *mut VkImage) -> VkResult>(storage::CreateImage.ptr)(device, pCreateInfo, pAllocator, pImage) }
     #[inline] pub unsafe fn CreateImageView(device: VkDevice, pCreateInfo: *const VkImageViewCreateInfo, pAllocator: *const VkAllocationCallbacks, pView: *mut VkImageView) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageViewCreateInfo, *const VkAllocationCallbacks, *mut VkImageView) -> VkResult>(storage::CreateImageView.ptr)(device, pCreateInfo, pAllocator, pView) }
     #[inline] pub unsafe fn CreateInstance(pCreateInfo: *const VkInstanceCreateInfo, pAllocator: *const VkAllocationCallbacks, pInstance: *mut VkInstance) -> VkResult { mem::transmute::<_, extern "system" fn(*const VkInstanceCreateInfo, *const VkAllocationCallbacks, *mut VkInstance) -> VkResult>(storage::CreateInstance.ptr)(pCreateInfo, pAllocator, pInstance) }
     #[inline] pub unsafe fn CreatePipelineCache(device: VkDevice, pCreateInfo: *const VkPipelineCacheCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineCache: *mut VkPipelineCache) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPipelineCacheCreateInfo, *const VkAllocationCallbacks, *mut VkPipelineCache) -> VkResult>(storage::CreatePipelineCache.ptr)(device, pCreateInfo, pAllocator, pPipelineCache) }
     #[inline] pub unsafe fn CreatePipelineLayout(device: VkDevice, pCreateInfo: *const VkPipelineLayoutCreateInfo, pAllocator: *const VkAllocationCallbacks, pPipelineLayout: *mut VkPipelineLayout) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkPipelineLayoutCreateInfo, *const VkAllocationCallbacks, *mut VkPipelineLayout) -> VkResult>(storage::CreatePipelineLayout.ptr)(device, pCreateInfo, pAllocator, pPipelineLayout) }
     #[inline] pub unsafe fn CreateQueryPool(device: VkDevice, pCreateInfo: *const VkQueryPoolCreateInfo, pAllocator: *const VkAllocationCallbacks, pQueryPool: *mut VkQueryPool) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkQueryPoolCreateInfo, *const VkAllocationCallbacks, *mut VkQueryPool) -> VkResult>(storage::CreateQueryPool.ptr)(device, pCreateInfo, pAllocator, pQueryPool) }
     #[inline] pub unsafe fn CreateRenderPass(device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkRenderPassCreateInfo, *const VkAllocationCallbacks, *mut VkRenderPass) -> VkResult>(storage::CreateRenderPass.ptr)(device, pCreateInfo, pAllocator, pRenderPass) }
     #[inline] pub unsafe fn CreateRenderPass2(device: VkDevice, pCreateInfo: *const VkRenderPassCreateInfo2, pAllocator: *const VkAllocationCallbacks, pRenderPass: *mut VkRenderPass) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkRenderPassCreateInfo2, *const VkAllocationCallbacks, *mut VkRenderPass) -> VkResult>(storage::CreateRenderPass2.ptr)(device, pCreateInfo, pAllocator, pRenderPass) }
     #[inline] pub unsafe fn CreateSampler(device: VkDevice, pCreateInfo: *const VkSamplerCreateInfo, pAllocator: *const VkAllocationCallbacks, pSampler: *mut VkSampler) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSamplerCreateInfo, *const VkAllocationCallbacks, *mut VkSampler) -> VkResult>(storage::CreateSampler.ptr)(device, pCreateInfo, pAllocator, pSampler) }
     #[inline] pub unsafe fn CreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo, pAllocator: *const VkAllocationCallbacks, pYcbcrConversion: *mut VkSamplerYcbcrConversion) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSamplerYcbcrConversionCreateInfo, *const VkAllocationCallbacks, *mut VkSamplerYcbcrConversion) -> VkResult>(storage::CreateSamplerYcbcrConversion.ptr)(device, pCreateInfo, pAllocator, pYcbcrConversion) }
     #[inline] pub unsafe fn CreateSemaphore(device: VkDevice, pCreateInfo: *const VkSemaphoreCreateInfo, pAllocator: *const VkAllocationCallbacks, pSemaphore: *mut VkSemaphore) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreCreateInfo, *const VkAllocationCallbacks, *mut VkSemaphore) -> VkResult>(storage::CreateSemaphore.ptr)(device, pCreateInfo, pAllocator, pSemaphore) }
     #[inline] pub unsafe fn CreateShaderModule(device: VkDevice, pCreateInfo: *const VkShaderModuleCreateInfo, pAllocator: *const VkAllocationCallbacks, pShaderModule: *mut VkShaderModule) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkShaderModuleCreateInfo, *const VkAllocationCallbacks, *mut VkShaderModule) -> VkResult>(storage::CreateShaderModule.ptr)(device, pCreateInfo, pAllocator, pShaderModule) }
     #[inline] pub unsafe fn DestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, *const VkAllocationCallbacks) -> ()>(storage::DestroyBuffer.ptr)(device, buffer, pAllocator) }
     #[inline] pub unsafe fn DestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBufferView, *const VkAllocationCallbacks) -> ()>(storage::DestroyBufferView.ptr)(device, bufferView, pAllocator) }
     #[inline] pub unsafe fn DestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyCommandPool.ptr)(device, commandPool, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorPool.ptr)(device, descriptorPool, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorSetLayout, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorSetLayout.ptr)(device, descriptorSetLayout, pAllocator) }
     #[inline] pub unsafe fn DestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorUpdateTemplate, *const VkAllocationCallbacks) -> ()>(storage::DestroyDescriptorUpdateTemplate.ptr)(device, descriptorUpdateTemplate, pAllocator) }
     #[inline] pub unsafe fn DestroyDevice(device: VkDevice, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkAllocationCallbacks) -> ()>(storage::DestroyDevice.ptr)(device, pAllocator) }
     #[inline] pub unsafe fn DestroyEvent(device: VkDevice, event: VkEvent, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent, *const VkAllocationCallbacks) -> ()>(storage::DestroyEvent.ptr)(device, event, pAllocator) }
     #[inline] pub unsafe fn DestroyFence(device: VkDevice, fence: VkFence, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkFence, *const VkAllocationCallbacks) -> ()>(storage::DestroyFence.ptr)(device, fence, pAllocator) }
     #[inline] pub unsafe fn DestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkFramebuffer, *const VkAllocationCallbacks) -> ()>(storage::DestroyFramebuffer.ptr)(device, framebuffer, pAllocator) }
     #[inline] pub unsafe fn DestroyImage(device: VkDevice, image: VkImage, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *const VkAllocationCallbacks) -> ()>(storage::DestroyImage.ptr)(device, image, pAllocator) }
     #[inline] pub unsafe fn DestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImageView, *const VkAllocationCallbacks) -> ()>(storage::DestroyImageView.ptr)(device, imageView, pAllocator) }
     #[inline] pub unsafe fn DestroyInstance(instance: VkInstance, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkInstance, *const VkAllocationCallbacks) -> ()>(storage::DestroyInstance.ptr)(instance, pAllocator) }
     #[inline] pub unsafe fn DestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipeline, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipeline.ptr)(device, pipeline, pAllocator) }
     #[inline] pub unsafe fn DestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipelineCache.ptr)(device, pipelineCache, pAllocator) }
     #[inline] pub unsafe fn DestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineLayout, *const VkAllocationCallbacks) -> ()>(storage::DestroyPipelineLayout.ptr)(device, pipelineLayout, pAllocator) }
     #[inline] pub unsafe fn DestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, *const VkAllocationCallbacks) -> ()>(storage::DestroyQueryPool.ptr)(device, queryPool, pAllocator) }
     #[inline] pub unsafe fn DestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkRenderPass, *const VkAllocationCallbacks) -> ()>(storage::DestroyRenderPass.ptr)(device, renderPass, pAllocator) }
     #[inline] pub unsafe fn DestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSampler, *const VkAllocationCallbacks) -> ()>(storage::DestroySampler.ptr)(device, sampler, pAllocator) }
     #[inline] pub unsafe fn DestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSamplerYcbcrConversion, *const VkAllocationCallbacks) -> ()>(storage::DestroySamplerYcbcrConversion.ptr)(device, ycbcrConversion, pAllocator) }
     #[inline] pub unsafe fn DestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkSemaphore, *const VkAllocationCallbacks) -> ()>(storage::DestroySemaphore.ptr)(device, semaphore, pAllocator) }
     #[inline] pub unsafe fn DestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkShaderModule, *const VkAllocationCallbacks) -> ()>(storage::DestroyShaderModule.ptr)(device, shaderModule, pAllocator) }
     #[inline] pub unsafe fn DeviceWaitIdle(device: VkDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice) -> VkResult>(storage::DeviceWaitIdle.ptr)(device) }
     #[inline] pub unsafe fn EndCommandBuffer(commandBuffer: VkCommandBuffer) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer) -> VkResult>(storage::EndCommandBuffer.ptr)(commandBuffer) }
     #[inline] pub unsafe fn EnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: *const std::os::raw::c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const std::os::raw::c_char, *mut u32, *mut VkExtensionProperties) -> VkResult>(storage::EnumerateDeviceExtensionProperties.ptr)(physicalDevice, pLayerName, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkLayerProperties) -> VkResult>(storage::EnumerateDeviceLayerProperties.ptr)(physicalDevice, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceExtensionProperties(pLayerName: *const std::os::raw::c_char, pPropertyCount: *mut u32, pProperties: *mut VkExtensionProperties) -> VkResult { mem::transmute::<_, extern "system" fn(*const std::os::raw::c_char, *mut u32, *mut VkExtensionProperties) -> VkResult>(storage::EnumerateInstanceExtensionProperties.ptr)(pLayerName, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceLayerProperties(pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult { mem::transmute::<_, extern "system" fn(*mut u32, *mut VkLayerProperties) -> VkResult>(storage::EnumerateInstanceLayerProperties.ptr)(pPropertyCount, pProperties) }
     #[inline] pub unsafe fn EnumerateInstanceVersion(pApiVersion: *mut u32) -> VkResult { mem::transmute::<_, extern "system" fn(*mut u32) -> VkResult>(storage::EnumerateInstanceVersion.ptr)(pApiVersion) }
     #[inline] pub unsafe fn EnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: *mut u32, pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *mut u32, *mut VkPhysicalDeviceGroupProperties) -> VkResult>(storage::EnumeratePhysicalDeviceGroups.ptr)(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) }
     #[inline] pub unsafe fn EnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: *mut u32, pPhysicalDevices: *mut VkPhysicalDevice) -> VkResult { mem::transmute::<_, extern "system" fn(VkInstance, *mut u32, *mut VkPhysicalDevice) -> VkResult>(storage::EnumeratePhysicalDevices.ptr)(instance, pPhysicalDeviceCount, pPhysicalDevices) }
     #[inline] pub unsafe fn FlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkMappedMemoryRange) -> VkResult>(storage::FlushMappedMemoryRanges.ptr)(device, memoryRangeCount, pMemoryRanges) }
     #[inline] pub unsafe fn FreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: *const VkCommandBuffer) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, u32, *const VkCommandBuffer) -> ()>(storage::FreeCommandBuffers.ptr)(device, commandPool, commandBufferCount, pCommandBuffers) }
     #[inline] pub unsafe fn FreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: *const VkDescriptorSet) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, u32, *const VkDescriptorSet) -> VkResult>(storage::FreeDescriptorSets.ptr)(device, descriptorPool, descriptorSetCount, pDescriptorSets) }
     #[inline] pub unsafe fn FreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: *const VkAllocationCallbacks) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, *const VkAllocationCallbacks) -> ()>(storage::FreeMemory.ptr)(device, memory, pAllocator) }
     #[inline] pub unsafe fn GetBufferDeviceAddress(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> VkDeviceAddress { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferDeviceAddressInfo) -> VkDeviceAddress>(storage::GetBufferDeviceAddress.ptr)(device, pInfo) }
     #[inline] pub unsafe fn GetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: *mut VkMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkBuffer, *mut VkMemoryRequirements) -> ()>(storage::GetBufferMemoryRequirements.ptr)(device, buffer, pMemoryRequirements) }
     #[inline] pub unsafe fn GetBufferMemoryRequirements2(device: VkDevice, pInfo: *const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetBufferMemoryRequirements2.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64 { mem::transmute::<_, extern "system" fn(VkDevice, *const VkBufferDeviceAddressInfo) -> u64>(storage::GetBufferOpaqueCaptureAddress.ptr)(device, pInfo) }
     #[inline] pub unsafe fn GetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: *const VkDescriptorSetLayoutCreateInfo, pSupport: *mut VkDescriptorSetLayoutSupport) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDescriptorSetLayoutCreateInfo, *mut VkDescriptorSetLayoutSupport) -> ()>(storage::GetDescriptorSetLayoutSupport.ptr)(device, pCreateInfo, pSupport) }
     #[inline] pub unsafe fn GetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, u32, u32, *mut VkPeerMemoryFeatureFlags) -> ()>(storage::GetDeviceGroupPeerMemoryFeatures.ptr)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) }
     #[inline] pub unsafe fn GetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: *mut VkDeviceSize) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, *mut VkDeviceSize) -> ()>(storage::GetDeviceMemoryCommitment.ptr)(device, memory, pCommittedMemoryInBytes) }
     #[inline] pub unsafe fn GetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64 { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDeviceMemoryOpaqueCaptureAddressInfo) -> u64>(storage::GetDeviceMemoryOpaqueCaptureAddress.ptr)(device, pInfo) }
     #[inline] pub unsafe fn GetDeviceProcAddr(device: VkDevice, pName: *const std::os::raw::c_char) -> PFN_vkVoidFunction { mem::transmute::<_, extern "system" fn(VkDevice, *const std::os::raw::c_char) -> PFN_vkVoidFunction>(storage::GetDeviceProcAddr.ptr)(device, pName) }
     #[inline] pub unsafe fn GetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: *mut VkQueue) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, u32, *mut VkQueue) -> ()>(storage::GetDeviceQueue.ptr)(device, queueFamilyIndex, queueIndex, pQueue) }
     #[inline] pub unsafe fn GetDeviceQueue2(device: VkDevice, pQueueInfo: *const VkDeviceQueueInfo2, pQueue: *mut VkQueue) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkDeviceQueueInfo2, *mut VkQueue) -> ()>(storage::GetDeviceQueue2.ptr)(device, pQueueInfo, pQueue) }
     #[inline] pub unsafe fn GetEventStatus(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::GetEventStatus.ptr)(device, event) }
     #[inline] pub unsafe fn GetFenceStatus(device: VkDevice, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkFence) -> VkResult>(storage::GetFenceStatus.ptr)(device, fence) }
     #[inline] pub unsafe fn GetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: *mut VkMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *mut VkMemoryRequirements) -> ()>(storage::GetImageMemoryRequirements.ptr)(device, image, pMemoryRequirements) }
     #[inline] pub unsafe fn GetImageMemoryRequirements2(device: VkDevice, pInfo: *const VkImageMemoryRequirementsInfo2, pMemoryRequirements: *mut VkMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageMemoryRequirementsInfo2, *mut VkMemoryRequirements2) -> ()>(storage::GetImageMemoryRequirements2.ptr)(device, pInfo, pMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *mut u32, *mut VkSparseImageMemoryRequirements) -> ()>(storage::GetImageSparseMemoryRequirements.ptr)(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSparseMemoryRequirements2(device: VkDevice, pInfo: *const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: *mut u32, pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2) -> () { mem::transmute::<_, extern "system" fn(VkDevice, *const VkImageSparseMemoryRequirementsInfo2, *mut u32, *mut VkSparseImageMemoryRequirements2) -> ()>(storage::GetImageSparseMemoryRequirements2.ptr)(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) }
     #[inline] pub unsafe fn GetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: *const VkImageSubresource, pLayout: *mut VkSubresourceLayout) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkImage, *const VkImageSubresource, *mut VkSubresourceLayout) -> ()>(storage::GetImageSubresourceLayout.ptr)(device, image, pSubresource, pLayout) }
     #[inline] pub unsafe fn GetInstanceProcAddr(instance: VkInstance, pName: *const std::os::raw::c_char) -> PFN_vkVoidFunction { mem::transmute::<_, extern "system" fn(VkInstance, *const std::os::raw::c_char) -> PFN_vkVoidFunction>(storage::GetInstanceProcAddr.ptr)(instance, pName) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: *mut VkExternalBufferProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalBufferInfo, *mut VkExternalBufferProperties) -> ()>(storage::GetPhysicalDeviceExternalBufferProperties.ptr)(physicalDevice, pExternalBufferInfo, pExternalBufferProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: *mut VkExternalFenceProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalFenceInfo, *mut VkExternalFenceProperties) -> ()>(storage::GetPhysicalDeviceExternalFenceProperties.ptr)(physicalDevice, pExternalFenceInfo, pExternalFenceProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceExternalSemaphoreInfo, *mut VkExternalSemaphoreProperties) -> ()>(storage::GetPhysicalDeviceExternalSemaphoreProperties.ptr)(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceFeatures) -> ()>(storage::GetPhysicalDeviceFeatures.ptr)(physicalDevice, pFeatures) }
     #[inline] pub unsafe fn GetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: *mut VkPhysicalDeviceFeatures2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceFeatures2) -> ()>(storage::GetPhysicalDeviceFeatures2.ptr)(physicalDevice, pFeatures) }
     #[inline] pub unsafe fn GetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, *mut VkFormatProperties) -> ()>(storage::GetPhysicalDeviceFormatProperties.ptr)(physicalDevice, format, pFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: *mut VkFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, *mut VkFormatProperties2) -> ()>(storage::GetPhysicalDeviceFormatProperties2.ptr)(physicalDevice, format, pFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: *mut VkImageFormatProperties) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, *mut VkImageFormatProperties) -> VkResult>(storage::GetPhysicalDeviceImageFormatProperties.ptr)(physicalDevice, format, type_, tiling, usage, flags, pImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: *mut VkImageFormatProperties2) -> VkResult { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceImageFormatInfo2, *mut VkImageFormatProperties2) -> VkResult>(storage::GetPhysicalDeviceImageFormatProperties2.ptr)(physicalDevice, pImageFormatInfo, pImageFormatProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceMemoryProperties) -> ()>(storage::GetPhysicalDeviceMemoryProperties.ptr)(physicalDevice, pMemoryProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceMemoryProperties2) -> ()>(storage::GetPhysicalDeviceMemoryProperties2.ptr)(physicalDevice, pMemoryProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceProperties) -> ()>(storage::GetPhysicalDeviceProperties.ptr)(physicalDevice, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: *mut VkPhysicalDeviceProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut VkPhysicalDeviceProperties2) -> ()>(storage::GetPhysicalDeviceProperties2.ptr)(physicalDevice, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkQueueFamilyProperties) -> ()>(storage::GetPhysicalDeviceQueueFamilyProperties.ptr)(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: *mut u32, pQueueFamilyProperties: *mut VkQueueFamilyProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *mut u32, *mut VkQueueFamilyProperties2) -> ()>(storage::GetPhysicalDeviceQueueFamilyProperties2.ptr)(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, type_: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, *mut u32, *mut VkSparseImageFormatProperties) -> ()>(storage::GetPhysicalDeviceSparseImageFormatProperties.ptr)(physicalDevice, format, type_, samples, usage, tiling, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: *mut u32, pProperties: *mut VkSparseImageFormatProperties2) -> () { mem::transmute::<_, extern "system" fn(VkPhysicalDevice, *const VkPhysicalDeviceSparseImageFormatInfo2, *mut u32, *mut VkSparseImageFormatProperties2) -> ()>(storage::GetPhysicalDeviceSparseImageFormatProperties2.ptr)(physicalDevice, pFormatInfo, pPropertyCount, pProperties) }
     #[inline] pub unsafe fn GetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: *mut usize, pData: *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, *mut usize, *mut std::os::raw::c_void) -> VkResult>(storage::GetPipelineCacheData.ptr)(device, pipelineCache, pDataSize, pData) }
     #[inline] pub unsafe fn GetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: *mut std::os::raw::c_void, stride: VkDeviceSize, flags: VkQueryResultFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, u32, u32, usize, *mut std::os::raw::c_void, VkDeviceSize, VkQueryResultFlags) -> VkResult>(storage::GetQueryPoolResults.ptr)(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags) }
     #[inline] pub unsafe fn GetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkRenderPass, *mut VkExtent2D) -> ()>(storage::GetRenderAreaGranularity.ptr)(device, renderPass, pGranularity) }
     #[inline] pub unsafe fn GetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkSemaphore, *mut u64) -> VkResult>(storage::GetSemaphoreCounterValue.ptr)(device, semaphore, pValue) }
     #[inline] pub unsafe fn InvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: *const VkMappedMemoryRange) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkMappedMemoryRange) -> VkResult>(storage::InvalidateMappedMemoryRanges.ptr)(device, memoryRangeCount, pMemoryRanges) }
     #[inline] pub unsafe fn MapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: *mut *mut std::os::raw::c_void) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, *mut *mut std::os::raw::c_void) -> VkResult>(storage::MapMemory.ptr)(device, memory, offset, size, flags, ppData) }
     #[inline] pub unsafe fn MergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: *const VkPipelineCache) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkPipelineCache, u32, *const VkPipelineCache) -> VkResult>(storage::MergePipelineCaches.ptr)(device, dstCache, srcCacheCount, pSrcCaches) }
     #[inline] pub unsafe fn QueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: *const VkBindSparseInfo, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, u32, *const VkBindSparseInfo, VkFence) -> VkResult>(storage::QueueBindSparse.ptr)(queue, bindInfoCount, pBindInfo, fence) }
     #[inline] pub unsafe fn QueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: *const VkSubmitInfo, fence: VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue, u32, *const VkSubmitInfo, VkFence) -> VkResult>(storage::QueueSubmit.ptr)(queue, submitCount, pSubmits, fence) }
     #[inline] pub unsafe fn QueueWaitIdle(queue: VkQueue) -> VkResult { mem::transmute::<_, extern "system" fn(VkQueue) -> VkResult>(storage::QueueWaitIdle.ptr)(queue) }
     #[inline] pub unsafe fn ResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkCommandBuffer, VkCommandBufferResetFlags) -> VkResult>(storage::ResetCommandBuffer.ptr)(commandBuffer, flags) }
     #[inline] pub unsafe fn ResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, VkCommandPoolResetFlags) -> VkResult>(storage::ResetCommandPool.ptr)(device, commandPool, flags) }
     #[inline] pub unsafe fn ResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) -> VkResult>(storage::ResetDescriptorPool.ptr)(device, descriptorPool, flags) }
     #[inline] pub unsafe fn ResetEvent(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::ResetEvent.ptr)(device, event) }
     #[inline] pub unsafe fn ResetFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkFence) -> VkResult>(storage::ResetFences.ptr)(device, fenceCount, pFences) }
     #[inline] pub unsafe fn ResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkQueryPool, u32, u32) -> ()>(storage::ResetQueryPool.ptr)(device, queryPool, firstQuery, queryCount) }
     #[inline] pub unsafe fn SetEvent(device: VkDevice, event: VkEvent) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, VkEvent) -> VkResult>(storage::SetEvent.ptr)(device, event) }
     #[inline] pub unsafe fn SignalSemaphore(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreSignalInfo) -> VkResult>(storage::SignalSemaphore.ptr)(device, pSignalInfo) }
     #[inline] pub unsafe fn TrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkCommandPool, VkCommandPoolTrimFlags) -> ()>(storage::TrimCommandPool.ptr)(device, commandPool, flags) }
     #[inline] pub unsafe fn UnmapMemory(device: VkDevice, memory: VkDeviceMemory) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDeviceMemory) -> ()>(storage::UnmapMemory.ptr)(device, memory) }
     #[inline] pub unsafe fn UpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: *const std::os::raw::c_void) -> () { mem::transmute::<_, extern "system" fn(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, *const std::os::raw::c_void) -> ()>(storage::UpdateDescriptorSetWithTemplate.ptr)(device, descriptorSet, descriptorUpdateTemplate, pData) }
     #[inline] pub unsafe fn UpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: *const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: *const VkCopyDescriptorSet) -> () { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkWriteDescriptorSet, u32, *const VkCopyDescriptorSet) -> ()>(storage::UpdateDescriptorSets.ptr)(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) }
     #[inline] pub unsafe fn WaitForFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence, waitAll: VkBool32, timeout: u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, u32, *const VkFence, VkBool32, u64) -> VkResult>(storage::WaitForFences.ptr)(device, fenceCount, pFences, waitAll, timeout) }
     #[inline] pub unsafe fn WaitSemaphores(device: VkDevice, pWaitInfo: *const VkSemaphoreWaitInfo, timeout: u64) -> VkResult { mem::transmute::<_, extern "system" fn(VkDevice, *const VkSemaphoreWaitInfo, u64) -> VkResult>(storage::WaitSemaphores.ptr)(device, pWaitInfo, timeout) }
}

mod storage {
    #![allow(non_snake_case, non_upper_case_globals)]

    use super::FnPtr;
    use std::os::raw;

     pub static mut AllocateCommandBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AllocateDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut AllocateMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BeginCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindBufferMemory2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut BindImageMemory2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBeginRenderPass2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindIndexBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBindVertexBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdBlitImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearAttachments: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearColorImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdClearDepthStencilImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyBufferToImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyImageToBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdCopyQueryPoolResults: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatch: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatchBase: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDispatchIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDraw: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexed: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexedIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndexedIndirectCount: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirect: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdDrawIndirectCount: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndQuery: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdEndRenderPass2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdExecuteCommands: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdFillBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdNextSubpass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdNextSubpass2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPipelineBarrier: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdPushConstants: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResetQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdResolveImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetBlendConstants: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDepthBias: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDepthBounds: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetDeviceMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetLineWidth: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetScissor: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilCompareMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilReference: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetStencilWriteMask: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdSetViewport: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdUpdateBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWaitEvents: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CmdWriteTimestamp: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateBufferView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateComputePipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorSetLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDescriptorUpdateTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateDevice: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateFence: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateGraphicsPipelines: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateImageView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreatePipelineCache: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreatePipelineLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateRenderPass2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSamplerYcbcrConversion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateSemaphore: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut CreateShaderModule: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyBufferView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorSetLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDescriptorUpdateTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyDevice: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyFence: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyFramebuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyImage: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyImageView: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyInstance: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipeline: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipelineCache: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyPipelineLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyRenderPass: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySampler: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySamplerYcbcrConversion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroySemaphore: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DestroyShaderModule: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut DeviceWaitIdle: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EndCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateDeviceExtensionProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateDeviceLayerProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceExtensionProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceLayerProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumerateInstanceVersion: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumeratePhysicalDeviceGroups: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut EnumeratePhysicalDevices: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FlushMappedMemoryRanges: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeCommandBuffers: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut FreeMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferDeviceAddress: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetBufferOpaqueCaptureAddress: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDescriptorSetLayoutSupport: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceGroupPeerMemoryFeatures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceMemoryCommitment: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceMemoryOpaqueCaptureAddress: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceProcAddr: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceQueue: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetDeviceQueue2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetEventStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetFenceStatus: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSparseMemoryRequirements: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSparseMemoryRequirements2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetImageSubresourceLayout: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetInstanceProcAddr: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalBufferProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalFenceProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceExternalSemaphoreProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFeatures: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFeatures2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceImageFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceImageFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMemoryProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceMemoryProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceQueueFamilyProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceQueueFamilyProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSparseImageFormatProperties: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPhysicalDeviceSparseImageFormatProperties2: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetPipelineCacheData: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetQueryPoolResults: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetRenderAreaGranularity: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut GetSemaphoreCounterValue: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut InvalidateMappedMemoryRanges: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MapMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut MergePipelineCaches: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueBindSparse: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueSubmit: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut QueueWaitIdle: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetCommandBuffer: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetDescriptorPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetFences: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut ResetQueryPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SetEvent: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut SignalSemaphore: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut TrimCommandPool: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UnmapMemory: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateDescriptorSetWithTemplate: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut UpdateDescriptorSets: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitForFences: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
     pub static mut WaitSemaphores: FnPtr = FnPtr { ptr: FnPtr::not_initialized as *const raw::c_void, is_loaded: false };
}

pub fn load<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const raw::c_void {
    unsafe {
         storage::AllocateCommandBuffers.load(&mut loadfn, "vkAllocateCommandBuffers");
         storage::AllocateDescriptorSets.load(&mut loadfn, "vkAllocateDescriptorSets");
         storage::AllocateMemory.load(&mut loadfn, "vkAllocateMemory");
         storage::BeginCommandBuffer.load(&mut loadfn, "vkBeginCommandBuffer");
         storage::BindBufferMemory.load(&mut loadfn, "vkBindBufferMemory");
         storage::BindBufferMemory2.load(&mut loadfn, "vkBindBufferMemory2");
         storage::BindImageMemory.load(&mut loadfn, "vkBindImageMemory");
         storage::BindImageMemory2.load(&mut loadfn, "vkBindImageMemory2");
         storage::CmdBeginQuery.load(&mut loadfn, "vkCmdBeginQuery");
         storage::CmdBeginRenderPass.load(&mut loadfn, "vkCmdBeginRenderPass");
         storage::CmdBeginRenderPass2.load(&mut loadfn, "vkCmdBeginRenderPass2");
         storage::CmdBindDescriptorSets.load(&mut loadfn, "vkCmdBindDescriptorSets");
         storage::CmdBindIndexBuffer.load(&mut loadfn, "vkCmdBindIndexBuffer");
         storage::CmdBindPipeline.load(&mut loadfn, "vkCmdBindPipeline");
         storage::CmdBindVertexBuffers.load(&mut loadfn, "vkCmdBindVertexBuffers");
         storage::CmdBlitImage.load(&mut loadfn, "vkCmdBlitImage");
         storage::CmdClearAttachments.load(&mut loadfn, "vkCmdClearAttachments");
         storage::CmdClearColorImage.load(&mut loadfn, "vkCmdClearColorImage");
         storage::CmdClearDepthStencilImage.load(&mut loadfn, "vkCmdClearDepthStencilImage");
         storage::CmdCopyBuffer.load(&mut loadfn, "vkCmdCopyBuffer");
         storage::CmdCopyBufferToImage.load(&mut loadfn, "vkCmdCopyBufferToImage");
         storage::CmdCopyImage.load(&mut loadfn, "vkCmdCopyImage");
         storage::CmdCopyImageToBuffer.load(&mut loadfn, "vkCmdCopyImageToBuffer");
         storage::CmdCopyQueryPoolResults.load(&mut loadfn, "vkCmdCopyQueryPoolResults");
         storage::CmdDispatch.load(&mut loadfn, "vkCmdDispatch");
         storage::CmdDispatchBase.load(&mut loadfn, "vkCmdDispatchBase");
         storage::CmdDispatchIndirect.load(&mut loadfn, "vkCmdDispatchIndirect");
         storage::CmdDraw.load(&mut loadfn, "vkCmdDraw");
         storage::CmdDrawIndexed.load(&mut loadfn, "vkCmdDrawIndexed");
         storage::CmdDrawIndexedIndirect.load(&mut loadfn, "vkCmdDrawIndexedIndirect");
         storage::CmdDrawIndexedIndirectCount.load(&mut loadfn, "vkCmdDrawIndexedIndirectCount");
         storage::CmdDrawIndirect.load(&mut loadfn, "vkCmdDrawIndirect");
         storage::CmdDrawIndirectCount.load(&mut loadfn, "vkCmdDrawIndirectCount");
         storage::CmdEndQuery.load(&mut loadfn, "vkCmdEndQuery");
         storage::CmdEndRenderPass.load(&mut loadfn, "vkCmdEndRenderPass");
         storage::CmdEndRenderPass2.load(&mut loadfn, "vkCmdEndRenderPass2");
         storage::CmdExecuteCommands.load(&mut loadfn, "vkCmdExecuteCommands");
         storage::CmdFillBuffer.load(&mut loadfn, "vkCmdFillBuffer");
         storage::CmdNextSubpass.load(&mut loadfn, "vkCmdNextSubpass");
         storage::CmdNextSubpass2.load(&mut loadfn, "vkCmdNextSubpass2");
         storage::CmdPipelineBarrier.load(&mut loadfn, "vkCmdPipelineBarrier");
         storage::CmdPushConstants.load(&mut loadfn, "vkCmdPushConstants");
         storage::CmdResetEvent.load(&mut loadfn, "vkCmdResetEvent");
         storage::CmdResetQueryPool.load(&mut loadfn, "vkCmdResetQueryPool");
         storage::CmdResolveImage.load(&mut loadfn, "vkCmdResolveImage");
         storage::CmdSetBlendConstants.load(&mut loadfn, "vkCmdSetBlendConstants");
         storage::CmdSetDepthBias.load(&mut loadfn, "vkCmdSetDepthBias");
         storage::CmdSetDepthBounds.load(&mut loadfn, "vkCmdSetDepthBounds");
         storage::CmdSetDeviceMask.load(&mut loadfn, "vkCmdSetDeviceMask");
         storage::CmdSetEvent.load(&mut loadfn, "vkCmdSetEvent");
         storage::CmdSetLineWidth.load(&mut loadfn, "vkCmdSetLineWidth");
         storage::CmdSetScissor.load(&mut loadfn, "vkCmdSetScissor");
         storage::CmdSetStencilCompareMask.load(&mut loadfn, "vkCmdSetStencilCompareMask");
         storage::CmdSetStencilReference.load(&mut loadfn, "vkCmdSetStencilReference");
         storage::CmdSetStencilWriteMask.load(&mut loadfn, "vkCmdSetStencilWriteMask");
         storage::CmdSetViewport.load(&mut loadfn, "vkCmdSetViewport");
         storage::CmdUpdateBuffer.load(&mut loadfn, "vkCmdUpdateBuffer");
         storage::CmdWaitEvents.load(&mut loadfn, "vkCmdWaitEvents");
         storage::CmdWriteTimestamp.load(&mut loadfn, "vkCmdWriteTimestamp");
         storage::CreateBuffer.load(&mut loadfn, "vkCreateBuffer");
         storage::CreateBufferView.load(&mut loadfn, "vkCreateBufferView");
         storage::CreateCommandPool.load(&mut loadfn, "vkCreateCommandPool");
         storage::CreateComputePipelines.load(&mut loadfn, "vkCreateComputePipelines");
         storage::CreateDescriptorPool.load(&mut loadfn, "vkCreateDescriptorPool");
         storage::CreateDescriptorSetLayout.load(&mut loadfn, "vkCreateDescriptorSetLayout");
         storage::CreateDescriptorUpdateTemplate.load(&mut loadfn, "vkCreateDescriptorUpdateTemplate");
         storage::CreateDevice.load(&mut loadfn, "vkCreateDevice");
         storage::CreateEvent.load(&mut loadfn, "vkCreateEvent");
         storage::CreateFence.load(&mut loadfn, "vkCreateFence");
         storage::CreateFramebuffer.load(&mut loadfn, "vkCreateFramebuffer");
         storage::CreateGraphicsPipelines.load(&mut loadfn, "vkCreateGraphicsPipelines");
         storage::CreateImage.load(&mut loadfn, "vkCreateImage");
         storage::CreateImageView.load(&mut loadfn, "vkCreateImageView");
         storage::CreateInstance.load(&mut loadfn, "vkCreateInstance");
         storage::CreatePipelineCache.load(&mut loadfn, "vkCreatePipelineCache");
         storage::CreatePipelineLayout.load(&mut loadfn, "vkCreatePipelineLayout");
         storage::CreateQueryPool.load(&mut loadfn, "vkCreateQueryPool");
         storage::CreateRenderPass.load(&mut loadfn, "vkCreateRenderPass");
         storage::CreateRenderPass2.load(&mut loadfn, "vkCreateRenderPass2");
         storage::CreateSampler.load(&mut loadfn, "vkCreateSampler");
         storage::CreateSamplerYcbcrConversion.load(&mut loadfn, "vkCreateSamplerYcbcrConversion");
         storage::CreateSemaphore.load(&mut loadfn, "vkCreateSemaphore");
         storage::CreateShaderModule.load(&mut loadfn, "vkCreateShaderModule");
         storage::DestroyBuffer.load(&mut loadfn, "vkDestroyBuffer");
         storage::DestroyBufferView.load(&mut loadfn, "vkDestroyBufferView");
         storage::DestroyCommandPool.load(&mut loadfn, "vkDestroyCommandPool");
         storage::DestroyDescriptorPool.load(&mut loadfn, "vkDestroyDescriptorPool");
         storage::DestroyDescriptorSetLayout.load(&mut loadfn, "vkDestroyDescriptorSetLayout");
         storage::DestroyDescriptorUpdateTemplate.load(&mut loadfn, "vkDestroyDescriptorUpdateTemplate");
         storage::DestroyDevice.load(&mut loadfn, "vkDestroyDevice");
         storage::DestroyEvent.load(&mut loadfn, "vkDestroyEvent");
         storage::DestroyFence.load(&mut loadfn, "vkDestroyFence");
         storage::DestroyFramebuffer.load(&mut loadfn, "vkDestroyFramebuffer");
         storage::DestroyImage.load(&mut loadfn, "vkDestroyImage");
         storage::DestroyImageView.load(&mut loadfn, "vkDestroyImageView");
         storage::DestroyInstance.load(&mut loadfn, "vkDestroyInstance");
         storage::DestroyPipeline.load(&mut loadfn, "vkDestroyPipeline");
         storage::DestroyPipelineCache.load(&mut loadfn, "vkDestroyPipelineCache");
         storage::DestroyPipelineLayout.load(&mut loadfn, "vkDestroyPipelineLayout");
         storage::DestroyQueryPool.load(&mut loadfn, "vkDestroyQueryPool");
         storage::DestroyRenderPass.load(&mut loadfn, "vkDestroyRenderPass");
         storage::DestroySampler.load(&mut loadfn, "vkDestroySampler");
         storage::DestroySamplerYcbcrConversion.load(&mut loadfn, "vkDestroySamplerYcbcrConversion");
         storage::DestroySemaphore.load(&mut loadfn, "vkDestroySemaphore");
         storage::DestroyShaderModule.load(&mut loadfn, "vkDestroyShaderModule");
         storage::DeviceWaitIdle.load(&mut loadfn, "vkDeviceWaitIdle");
         storage::EndCommandBuffer.load(&mut loadfn, "vkEndCommandBuffer");
         storage::EnumerateDeviceExtensionProperties.load(&mut loadfn, "vkEnumerateDeviceExtensionProperties");
         storage::EnumerateDeviceLayerProperties.load(&mut loadfn, "vkEnumerateDeviceLayerProperties");
         storage::EnumerateInstanceExtensionProperties.load(&mut loadfn, "vkEnumerateInstanceExtensionProperties");
         storage::EnumerateInstanceLayerProperties.load(&mut loadfn, "vkEnumerateInstanceLayerProperties");
         storage::EnumerateInstanceVersion.load(&mut loadfn, "vkEnumerateInstanceVersion");
         storage::EnumeratePhysicalDeviceGroups.load(&mut loadfn, "vkEnumeratePhysicalDeviceGroups");
         storage::EnumeratePhysicalDevices.load(&mut loadfn, "vkEnumeratePhysicalDevices");
         storage::FlushMappedMemoryRanges.load(&mut loadfn, "vkFlushMappedMemoryRanges");
         storage::FreeCommandBuffers.load(&mut loadfn, "vkFreeCommandBuffers");
         storage::FreeDescriptorSets.load(&mut loadfn, "vkFreeDescriptorSets");
         storage::FreeMemory.load(&mut loadfn, "vkFreeMemory");
         storage::GetBufferDeviceAddress.load(&mut loadfn, "vkGetBufferDeviceAddress");
         storage::GetBufferMemoryRequirements.load(&mut loadfn, "vkGetBufferMemoryRequirements");
         storage::GetBufferMemoryRequirements2.load(&mut loadfn, "vkGetBufferMemoryRequirements2");
         storage::GetBufferOpaqueCaptureAddress.load(&mut loadfn, "vkGetBufferOpaqueCaptureAddress");
         storage::GetDescriptorSetLayoutSupport.load(&mut loadfn, "vkGetDescriptorSetLayoutSupport");
         storage::GetDeviceGroupPeerMemoryFeatures.load(&mut loadfn, "vkGetDeviceGroupPeerMemoryFeatures");
         storage::GetDeviceMemoryCommitment.load(&mut loadfn, "vkGetDeviceMemoryCommitment");
         storage::GetDeviceMemoryOpaqueCaptureAddress.load(&mut loadfn, "vkGetDeviceMemoryOpaqueCaptureAddress");
         storage::GetDeviceProcAddr.load(&mut loadfn, "vkGetDeviceProcAddr");
         storage::GetDeviceQueue.load(&mut loadfn, "vkGetDeviceQueue");
         storage::GetDeviceQueue2.load(&mut loadfn, "vkGetDeviceQueue2");
         storage::GetEventStatus.load(&mut loadfn, "vkGetEventStatus");
         storage::GetFenceStatus.load(&mut loadfn, "vkGetFenceStatus");
         storage::GetImageMemoryRequirements.load(&mut loadfn, "vkGetImageMemoryRequirements");
         storage::GetImageMemoryRequirements2.load(&mut loadfn, "vkGetImageMemoryRequirements2");
         storage::GetImageSparseMemoryRequirements.load(&mut loadfn, "vkGetImageSparseMemoryRequirements");
         storage::GetImageSparseMemoryRequirements2.load(&mut loadfn, "vkGetImageSparseMemoryRequirements2");
         storage::GetImageSubresourceLayout.load(&mut loadfn, "vkGetImageSubresourceLayout");
         storage::GetInstanceProcAddr.load(&mut loadfn, "vkGetInstanceProcAddr");
         storage::GetPhysicalDeviceExternalBufferProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalBufferProperties");
         storage::GetPhysicalDeviceExternalFenceProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalFenceProperties");
         storage::GetPhysicalDeviceExternalSemaphoreProperties.load(&mut loadfn, "vkGetPhysicalDeviceExternalSemaphoreProperties");
         storage::GetPhysicalDeviceFeatures.load(&mut loadfn, "vkGetPhysicalDeviceFeatures");
         storage::GetPhysicalDeviceFeatures2.load(&mut loadfn, "vkGetPhysicalDeviceFeatures2");
         storage::GetPhysicalDeviceFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceFormatProperties");
         storage::GetPhysicalDeviceFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceFormatProperties2");
         storage::GetPhysicalDeviceImageFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceImageFormatProperties");
         storage::GetPhysicalDeviceImageFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceImageFormatProperties2");
         storage::GetPhysicalDeviceMemoryProperties.load(&mut loadfn, "vkGetPhysicalDeviceMemoryProperties");
         storage::GetPhysicalDeviceMemoryProperties2.load(&mut loadfn, "vkGetPhysicalDeviceMemoryProperties2");
         storage::GetPhysicalDeviceProperties.load(&mut loadfn, "vkGetPhysicalDeviceProperties");
         storage::GetPhysicalDeviceProperties2.load(&mut loadfn, "vkGetPhysicalDeviceProperties2");
         storage::GetPhysicalDeviceQueueFamilyProperties.load(&mut loadfn, "vkGetPhysicalDeviceQueueFamilyProperties");
         storage::GetPhysicalDeviceQueueFamilyProperties2.load(&mut loadfn, "vkGetPhysicalDeviceQueueFamilyProperties2");
         storage::GetPhysicalDeviceSparseImageFormatProperties.load(&mut loadfn, "vkGetPhysicalDeviceSparseImageFormatProperties");
         storage::GetPhysicalDeviceSparseImageFormatProperties2.load(&mut loadfn, "vkGetPhysicalDeviceSparseImageFormatProperties2");
         storage::GetPipelineCacheData.load(&mut loadfn, "vkGetPipelineCacheData");
         storage::GetQueryPoolResults.load(&mut loadfn, "vkGetQueryPoolResults");
         storage::GetRenderAreaGranularity.load(&mut loadfn, "vkGetRenderAreaGranularity");
         storage::GetSemaphoreCounterValue.load(&mut loadfn, "vkGetSemaphoreCounterValue");
         storage::InvalidateMappedMemoryRanges.load(&mut loadfn, "vkInvalidateMappedMemoryRanges");
         storage::MapMemory.load(&mut loadfn, "vkMapMemory");
         storage::MergePipelineCaches.load(&mut loadfn, "vkMergePipelineCaches");
         storage::QueueBindSparse.load(&mut loadfn, "vkQueueBindSparse");
         storage::QueueSubmit.load(&mut loadfn, "vkQueueSubmit");
         storage::QueueWaitIdle.load(&mut loadfn, "vkQueueWaitIdle");
         storage::ResetCommandBuffer.load(&mut loadfn, "vkResetCommandBuffer");
         storage::ResetCommandPool.load(&mut loadfn, "vkResetCommandPool");
         storage::ResetDescriptorPool.load(&mut loadfn, "vkResetDescriptorPool");
         storage::ResetEvent.load(&mut loadfn, "vkResetEvent");
         storage::ResetFences.load(&mut loadfn, "vkResetFences");
         storage::ResetQueryPool.load(&mut loadfn, "vkResetQueryPool");
         storage::SetEvent.load(&mut loadfn, "vkSetEvent");
         storage::SignalSemaphore.load(&mut loadfn, "vkSignalSemaphore");
         storage::TrimCommandPool.load(&mut loadfn, "vkTrimCommandPool");
         storage::UnmapMemory.load(&mut loadfn, "vkUnmapMemory");
         storage::UpdateDescriptorSetWithTemplate.load(&mut loadfn, "vkUpdateDescriptorSetWithTemplate");
         storage::UpdateDescriptorSets.load(&mut loadfn, "vkUpdateDescriptorSets");
         storage::WaitForFences.load(&mut loadfn, "vkWaitForFences");
         storage::WaitSemaphores.load(&mut loadfn, "vkWaitSemaphores");

    }
}

